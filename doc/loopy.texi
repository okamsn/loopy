\input texinfo    @c -*- texinfo -*-
@c %**start of header
@setfilename loopy.info
@settitle Loopy: A Looping and Iteration Macro
@documentencoding UTF-8
@documentlanguage en
@c %**end of header

@dircategory Emacs
@direntry
* Loopy: (loopy).       A better looping and iteration macro.
@end direntry

@finalout
@titlepage
@title Loopy: A Looping and Iteration Macro
@author Earl Hyatt
@end titlepage

@contents

@ifnottex
@node Top
@top Loopy: A Looping and Iteration Macro

@code{loopy} is a macro meant for iterating and looping.  It is similar in usage to
@code{cl-loop} (@ref{Loop Facility,,,cl,}) but uses parenthesized expressions rather than
keyword clauses.

For most cases, @code{loopy} is a featureful replacement for @code{cl-loop} and
complementary to Emacs's built-in looping and mapping features (such as the
libraries @samp{seq} (@ref{Sequence Functions,,,elisp,}) and @samp{cl-lib} (@ref{Top,,,cl,})).


@end ifnottex

@menu
* Introduction::                 A short overview of features.
* Basic Concepts::               Basic information about `loopy' and its loops.
* Special Macro Arguments::      Creating the environment of the loop.
* Loop Commands::                The main features of `loopy'.
* Destructuring Macros::         Destructuring outside of the loop.
* The @code{loopy-iter} Macro::  Embedding loop commands in arbitrary code.
* Using Flags::                  Using flags to change behavior.
* Custom Aliases::               How to add one's own aliases.
* Custom Commands::              Extending `loopy' with personal commands.
* Comparing to @code{cl-loop}::  Why `loopy' instead of `cl-loop'.
* Translating to and from @samp{cl-loop}:: Converting `cl-loop' to `loopy', and vice versa.
* Macro Argument and Loop Command Index::
* Variable Index::
* Concept Index::

@detailmenu
--- The Detailed Node Listing ---

Loop Commands

* Basic Destructuring::          How to destructure variables and values in loop commands.
* Generic Evaluation::           Setting variables, evaluating expressions, etc.
* Iteration::                    Iterating through sequences, etc.
* Accumulation::                 Accumulating values into new sequences, aggregating values, etc.
* Checking Conditions::          Testing whether a condition holds true.
* Control Flow::                 When to run loop commands.
* Sub-Loops::                    Running a loop within a loop.

Iteration

* Generic Iteration::            Looping a certain number of times.
* Numeric Iteration::            Iterating through numbers.
* Sequence Iteration::           Iterating through sequences.
* Sequence Index Iteration::     Iterating through indices without accessing values.
* Sequence Reference Iteration:: Iterating through places/fields in sequences.

Accumulation

* Common Properties of Accumulation Commands::
* Generic Accumulation::         Accumulating function output.
* Numeric Accumulation::         Using and returning numbers.
* Sequence Accumulation::        Using and returning sequences.
* Other Accumulation Commands::
* Optimizing Accumulations::     Producing efficient accumulations.

Control Flow

* Conditionals::                 Choosing if commands should run.
* Skipping Cycles::              Immediately beginning the next iteration.
* Early Exit::                   Leaving the loop early, with or without returning values.

The @code{loopy-iter} Macro

* Default Bare Names in @code{loopy-iter}::

Custom Commands

* Background Info::              The internals of `loopy'.
* Hello World::                  A minimal working example.
* An @code{always} Command::     Adding a feature from `cl-loop'.
* Custom commands in the @code{loopy-iter} macro::
* Finding More Examples::

Translating to and from @samp{cl-loop}

* For Clauses::
* Iteration Clauses::
* Accumulation Clauses::
* Other Clauses::

@end detailmenu
@end menu

@node Introduction
@chapter Introduction

Loopy is a library for looping and iteration, with supplemental features for
destructuring.  Upfront, the features provided are summarized below.  They are
described thoroughly later in this document.

@table @asis
@item @code{loopy}
A macro similar to @code{cl-loop}.  Unlike @code{cl-loop}, @code{loopy} uses
parenthesized expressions instead of ``clauses''.

@lisp
;; A simple usage of `cl-loop':
(cl-loop for i from 1 to 10
         if (cl-evenp i) collect i into evens
         else collect i into odds
         end ; This `end' keyword is optional here.
         finally return (list odds evens))

;; How it could be done using `loopy':
(loopy (numbers i :from 1 :to 10)
       (if (cl-evenp i)
           (collect evens i)
         (collect odds i))
       (finally-return odds evens))
@end lisp

@item @code{loopy-iter}
A macro similar to Common Lisp's Iterate macro (@ref{The @code{loopy-iter} Macro}).
Unlike Common Lisp's @code{loop}, the @code{iterate} macro allows the embedding of its
looping constructs inside of arbitrary code.  To be clear, @code{loopy-iter} is
not a port of @code{iterate} to Emacs Lisp.

@lisp
;; => ((1 2 3) (-3 -2 -1) (0))
(loopy-iter (numbering i -3 3)
            (pcase i
              ((pred cl-plusp)  (collecting positives i))
              ((pred cl-minusp) (collecting negatives i))
              (_                (collecting other i)))
            (finally-return positives negatives other))
@end lisp

@item @code{loopy-let*}, @code{loopy-setq}, @code{loopy-lambda}, and @code{loopy-ref}
Destructuring
macros that can be used outside of @code{loopy} and @code{loopy-iter}
(@ref{Basic Destructuring}).  For convenience, Loopy provides its own form of
destructuring, which is similar to, though more featureful than, that provided
by @samp{cl-lib}.

@lisp
;; => (1 2 3 (:k1 4) 4)
(loopy-let* (((a b c &rest d &key k1) (list 1 2 3 :k1 4)))
  (list a b c d k1))

;; => ((7 2 8) [9 2 10])
(let ((my-list (list 1 2 3))
      (my-vector  (vector 1 2 3)))
  (loopy-ref (((a _ c) my-list)
              ([d _ e] my-vector))
    (setf a 7 c 8 d 9 e 10)
    (list my-list my-vector)))
@end lisp
@end table


Some other things to note are:
@itemize
@item
@code{loopy} (and so @code{loopy-iter}) support destructuring for both iteration and
accumulation commands.

@lisp
;; Summing the nth elements of arrays:
;; => (8 10 12 14 16 18)
(loopy (list (list-elem1 list-elem2)
             '(([1 2 3] [4 5 6])
               ([7 8 9] [10 11 12])))
       (sum [sum1 sum2 sum3] list-elem1)
       (sum [sum4 sum5 sum6] list-elem2)
       (finally-return sum1 sum2 sum3 sum4 sum5 sum6))

;; Separate the elements of sub-list:
;; => ((1 3) (2 4))
(loopy (list i '((1 2) (3 4)))
       (collect (elem1 elem2) i)
       (finally-return elem1 elem2))
@end lisp

@item
The looping macros are configurable and extensible.  One can create their own
loop commands and command aliases.  ``Flags'' can be used to configure the
looping macros' behavior, such as by using an alternative destructuring system
like @samp{pcase} or the Dash library.

@lisp
;; Use `pcase' to destructure array elements:
;; => ((1 2 3 4) (10 12 14) (11 13 15))
(loopy (flag pcase)
       (array (or `(,car . ,cdr) digit)
              [1 (10 . 11) 2 (12 . 13) 3 4 (14 . 15)])
       (if digit
           (collect digits digit)
         (collect cars car)
         (collect cdrs cdr))
       (finally-return digits cars cdrs))
@end lisp
@end itemize


@itemize
@item
Compared to @code{cl-loop}, more constructs are provided for how loops are
completed and values returned.  For example, the @samp{leave} command will exit the
loop without changing what would be returned.  This is a more generic form of
@samp{while} and @samp{until}, though those are also provided.  @samp{after-do}
(a.k.a. @samp{else-do}) is a construct that runs Lisp code only when the loop
completes successfully, similar to Python's @code{else} statement after @code{for} and
@code{while} loops.

@lisp
;; => (1 3 5)
(loopy (numbers i :from 1 :to 10)
       (cond ((cl-evenp i) (skip))
             ((> i 5)      (leave)))
       (collect i))

;; => (t nil)
(loopy (with (always-run)
             (run-when-complete))
       (numbers i :from 1 :to 10)
       (while (< i 4))
       (after-do   (setq run-when-complete t))
       (finally-do (setq always-run t))
       (finally-return always-run run-when-complete))
@end lisp

@item
One can declare which accumulations should be optimized (and so treated as
implied variables).  This can make accumulation into multiple named variables
much faster.

@lisp
;; Expands into the efficient `push'-`nreverse' idiom, not
;; the `nonc'-`list' idiom that would be used by `cl-loop'.
(loopy (accum-opt cars cdrs)
       (array elem [(1 . 2) (3 . 4)])
       (collect (cars . cdrs) elem)
       (finally-return cars cdrs))
@end lisp
@end itemize

That being said, Loopy is not yet feature complete.  Please request features or
report problems in this projectâ€™s @uref{https://github.com/okamsn/loopy/issues, issues tracker}.

@node Basic Concepts
@chapter Basic Concepts

Except for an optional loop name, all arguments of the @code{loopy} macro are
parenthesized expressions.  These expressions can, for example, assign variables
local to the loop, add code that runs before/after the loop, and/or set the
ultimate return value of the macro.

For convenience and clarity, expressions that generate code in the loop body are
called ``loop commands'' (@ref{Loop Commands}).  Expressions that generate code around
the loop are called ``special macro arguments'' or just ``macro arguments'' as
opposed to ``loop commands'' (@ref{Special Macro Arguments}).

``Loop commands'' are the main building blocks of the @code{loopy} macro, such as the
command @samp{list} in the expression @samp{(list i '(1 2 3))}.  A command inserts code
into the loop body, but can also perform additional setup like initializing
variables.  Many commands set a condition for ending the loop.  In the case of
@samp{list}, the command iterates through the elements of a list, binding the
variable @code{i} to each element.  After iterating through all elements, the loop is
forced to end.

In general, a loop ends when any looping condition required by a loop command
evaluates to @code{nil}.  If no conditions are needed, then the loop runs infinitely
until a early-exit command is reached (@ref{Early Exit, , Exiting the Loop Early}).

The default return value of the loop is @code{nil}.  Other return values must be
stated explicitly, as in one of the early-exit commands or part of the
@samp{finally-return} macro argument, or come from accumulating loop commands using
an implied accumulation variable (@ref{Accumulation, , Accumulation Commands}).

The @code{loopy} macro is configurable.  One can add custom commands
(@ref{Custom Commands}), add custom command aliases (@ref{Custom Aliases}), and specify
macro options for a particular loop (@ref{Using Flags}).  Each of these ideas is
explained in detail later in this document.

@node Special Macro Arguments
@chapter Special Macro Arguments

@cindex special macro argument
There are only a few special macro arguments.  If a macro argument does not
match one of these special few, @code{loopy} will attempt to interpret it as a loop
command, and signal an error if that fails.

These special macro arguments are always processed before loop commands,
regardless of the order of the arguments passed to @code{loopy}.

@findex named
@table @asis
@item @samp{named} or just a symbol
Name the loop.  This also names the @code{cl-block}
which contains the loop.  This can be of the form @samp{(named NAME)} or just
@samp{NAME}.

@lisp
;; => 3
(loopy outer
       (array i [(1 2) (3 4) (5 6)])
       (loopy (list j i)
              (when (> j 2)
                (return-from outer j))))

;; => 3
(loopy (named outer)
       (array i [(1 2) (3 4) (5 6)])
       (loopy (list j i)
              (when (> j 2)
                (return-from outer j))))
@end lisp
@end table

@findex with
@findex let*
@findex init
@table @asis
@item @samp{with}, @samp{let*}, @samp{init}
Declare variables before the loop, in order.  This
can also be used to initialize variables referenced by loop commands.  @samp{with}
can use destructuring (@ref{Basic Destructuring}).

@lisp
;; => (4 5 6)
(loopy
 (with (a 1)          ; Set `a' to 1.
       (b (1+ a)))    ; Set `b' to 1+1=2.
 (list i '(1 2 3))    ; Bind `i' to elements of the list.
 (collect (+ i a b))) ; Collect sum of `a', `b', and each `i' into a list.

;; => 16
(loopy
 (let* (my-sum 10))       ; Bind `my-sum' to 10.
 (list i '(1 2 3))        ; Bind `i' to elements of the list.
 (sum my-sum i)           ; Set `my-sum' to `i' + `my-sum'.
 (finally-return my-sum)) ; Return the value of `my-sum'.
@end lisp
@end table

@findex without
@findex no-with
@findex no-init
@table @asis
@item @samp{without}, @samp{no-with}, @samp{no-init}
Variables that @code{loopy} should not try to
initialize.  @code{loopy} tries to initialize all of the variables that it uses
in a @code{let}-like form, but that isnâ€™t always desired.

@lisp
;; Without `without', `loopy' would try to initialize `a' to nil, which would
;; overwrite the value of 5 above.

(let ((a 5))
  (loopy (without a)        ; Don't initialize `a'.
         (until (zerop a))  ; Leave loop when `a' equals 0.
         (collect a)        ; Collect the value of `a' into a list.
         (set a (1- a))))   ; Set `a' to the value of `(1- a)'.

(let ((a 5))
  (loopy (no-init a)
         (while (not (zerop a)))
         (collect a)
         (set a (1- a))))
@end lisp
@end table

@findex before
@findex before-do
@findex initially-do
@findex initially
@table @asis
@item @samp{before-do}, @samp{before}, @samp{initially-do}, @samp{initially}
Run Lisp expressions
before the loop starts, after variables are initialized.

@lisp
;; = > (6 7 8)
(loopy (with (a 1) (b 2))      ; Set `a' to 1 and `b' to 2.
       (before-do (cl-incf a)  ; Add 1 to `a'.
                  (cl-incf b)) ; Add 1 to `b'.
       (list i '(1 2 3))       ; Set `i' to each element in the list.
       (collect (+ i a b)))    ; Collect each sum into a list.

;; => (1 2 3)
(loopy (with (a 1))
       ;; Message before the loop starts:
       (initially (message "Starting loop..."))
       (list i '(1 2 3))
       (collect i))
@end lisp
@end table

@findex after-do
@findex after
@findex else-do
@findex else
@table @asis
@item @samp{after-do}, @samp{after}, @samp{else-do}, @samp{else}
Run Lisp expressions after the
loop successfully completes.  This is similar to Pythonâ€™s @code{else} statement
following a @code{for} or @code{while} loop.

@lisp
;; Messages that no odd number was found:
;; => nil
(loopy (list i '(2 4 6 8))
       (when (cl-oddp i)
         (do (message "Odd number found."))
         (return t))                  ; Make the loop return `t'.
       (after-do
        (message "No odd number found.")
        ;; The macro already return `nil' by default,
        ;; but one can still use `cl-return' to be more explicit.
        (cl-return nil)))

;; Messages that an odd number was found:
;; => t
(loopy (list i '(2 4 5 8))
       (when (cl-oddp i)
         (do (message "Odd number found."))
         (return t))
       (else (message "No odd number found.")))
@end lisp
@end table

@findex finally-do
@findex finally
@table @asis
@item @samp{finally-do}, @samp{finally}
Run Lisp expressions after the loop exits, always.
These expressions do not affect the final return value of the loop.

@lisp
;; => (nil finally)
(let (a b)
  (loopy (list i '(1 2 3 4 5 6))
         (when (> i 3) (leave))
         (after-do (setq a 'after))
         (finally-do (setq b 'finally)))
  (list a b))

;; => nil
(loopy (leave)
       ;; Doesn't affect return value:
       (finally-do 999))
@end lisp
@end table

@findex finally-return
@table @asis
@item @samp{finally-return}
Return a value, regardless of how the loop completes.
These arguments override any explicit return values given in commands like
@samp{return} and @samp{return-from}, as well as any implicit return values that can
be created by accumulation commands.

Specifying multiple values is the same as returning a list of those values.

@lisp
;; => 999
(loopy (return 1)
       (finally-return 999))

;; => (1 2)
(loopy (leave) ; Leave to avoid infinite loop.
       (finally-return 1 2))
@end lisp
@end table

@findex finally-protect
@findex finally-protected
@table @asis
@item @samp{finally-protect}, @samp{finally-protected}
Wrap the loop in @code{unwind-protect}
(not to be confused with @code{condition-case}).  The arguments to this special
macro argument (which are Lisp expressions) can access the variables used by
the loop.

Signaling an error will prevent the loop from returning a value.  This
special macro argument does not prevent that error from being signaled, and
is only meant to help avoid lingering effects that might arise from
unplanned stops of the loop's execution.

@lisp
;; Prints out the following, then continues signalling the error:
;;
;; Example var is: 1
;; Last used element in list is: 4
;; Then current value of â€˜my-collectionâ€™: (1 2 3 4)
(loopy (with (example-var 1))
       (list i '(1 2 3 4 5))
       (collect my-collection i)
       (when (> i 3)
         (do (signal 'some-error (list i))))
       (finally-protect
        (message "Example var is: %d" example-var)
        (message "Last used element in list is: %s" i)
        (message "Then current value of `my-collection': %s"
                 my-collection)))
@end lisp
@end table

@findex flag
@findex flags
@table @asis
@item @samp{flag}, @samp{flags}
Options that change the behavior of @code{loopy} (@ref{Using Flags}).
For example, one can opt to use a different destructuring system, such as
what is provided by the Dash library.  See that linked section for more
information.

@lisp
;; Use Dash for destructuring:
;;
;; (((1 2) (3 4)) (1 3) (2 4))
(require 'loopy-dash)
(loopy (flag dash)
       (list (whole &as a b) '((1 2) (3 4)))
       (collect wholes whole)
       (collect as a)
       (collect bs b)
       (finally-return wholes as bs))

;; Use Seq for destructuring:
;;
;; => (1 [2 3])
(loopy (flag seq)
       (with ([a &rest b] [1 2 3]))
       (return a b))
@end lisp
@end table

@findex accum-opt
@findex opt-accum
@table @asis
@item @samp{accum-opt}, @samp{opt-accum}
Accumulation variables whose use should be
optimized (@ref{Optimizing Accumulations}).  Implicit accumulation variables are always
optimized, but explicit variables are unoptimized by default
(@ref{Accumulation}).  This special macro argument allows optimizing named
variables (with restrictions), which is useful when using more than one
accumulation variable.  This is especially important for destructuring
accumulations.

@lisp
;; Multiple accumulation variables in `cl-loop':
;; => ((2 4) (1 3))
(cl-loop for i in '(1 2 3 4)
         if (cl-evenp i) collect i into evens
         else collect i into odds
         finally return (list evens odds))

;; Faster code than above `cl-loop' (try `pp-macroexpand-last-sexp'):
;; => ((2 4) (1 3))
(loopy (accum-opt evens odds)
       (list i '(1 2 3 4))
       (if (cl-evenp i)
           (collect evens i)
         (collect odds i))
       (finally-return evens odds))
@end lisp
@end table


@findex wrap
@table @asis
@item @samp{wrap}
A list of forms in which to wrap the loop itself (that is, not
@samp{before-do}, @samp{after-do}, or anything else).  Each form can be either a list
or a symbol.  If a list, the loop is inserted into the end of the list.  If
a symbol, it is first converted to a list of 1 element before inserting the
loop at the end of the list.  This special macro argument is similar in use
to the Emacs Lisp macro @code{thread-last}, except that forms listed first are
applied last, as in normal Lisp code.

The main difference between using this macro argument instead of just
writing the function calls normally is that these forms can access variables
initialized by the macro and that they occur after the code in @samp{before-do}
is run.

@lisp
(loopy (wrap (let ((a 1)))
             save-match-data)
       ...)

;; Similar to
(let ((a 1))
  (save-match-data
    (loopy ...)))

;; => 6
(loopy (with (a 1))
       (before-do (cl-incf a 2))
       (wrap (progn (setq a (* 2 a))))
       (return a))
@end lisp
@end table


As stated above, all other expressions will be considered loop commands
(@ref{Loop Commands}).

@quotation Note
For convenience, the @code{while}-loop that @code{loopy} creates is wrapped by a
@code{cl-block}.  Naming the loop names this block, which is created @emph{after}
initializing variables.

The two special macro arguments @samp{before-do} and @samp{after-do} (and their aliases)
also occur within this @code{cl-block}, before and after the loop, respectively.
This has 2 consequences:

@enumerate
@item
Using @code{cl-return} in @samp{before-do} will prevent the both loop and @samp{after-do}
code from running.

@item
Using @code{cl-return} or an early exit command (@ref{Early Exit}) in the loop will
prevent the @samp{after-do} code from running.  For this reason, @samp{after-do} is
run if and only if the loop completes successfully, hence the alias
@samp{else-do} and the similarity to Python's @code{else} statement when used with
loops.
@end enumerate

These three sections (@samp{before-do}, @samp{after-do}, and the @code{while}-loop itself)
are the only structures that occur within the @code{cl-block}.  Using @code{cl-return}
in @samp{before-do}, for example, will not stop code in @samp{finally-do} from running
or values listed in @samp{finally-return} from being returned.

@end quotation

@node Loop Commands
@chapter Loop Commands

@cindex loop command
If a macro argument does not match one of the previously listed special macro
arguments (@ref{Special Macro Arguments}), @code{loopy} will attempt to treat it as a loop
command.  Loop commands are only valid as a top-level argument to the macro, or
inside another loop command.

Therefore, these macro calls are valid:

@lisp
(loopy (list i '(1 2 3))
       (collect coll i)
       ;; Special macro argument:
       (finally-return coll))

;; Implicit accumulation variable and implicit return value:
(loopy (list i '(1 2 3))
       (collect i))
@end lisp

and this is not:

@lisp
(loopy (with (list i '(1 2 3)))
       (finally-return (collect coll i)))
@end lisp

Trying to use loop commands in places where they don't belong will result in
errors when the code is evaluated.

You should keep in mind that commands are evaluated in order.  This means that
attempting to do something like the below example might not do what you expect,
as @samp{i} is assigned a value from the list after collecting @samp{i} into @samp{coll}.

@float Listing,org09f2c80
@lisp
;; => (nil 1 2)
(loopy (collect coll i)
       (list i '(1 2 3))
       (finally-return coll))
@end lisp
@caption{An example of how loop commands are evaluated in order.}
@end float

For convenience and understanding, the same command might have multiple names,
called @dfn{aliases}.  For example, the command @samp{set} has an alias @samp{expr},
because @samp{set} is used to @emph{set} a variable to the value of an @emph{expression}.
Similary, the @samp{array} command has the alias @samp{string}, because the @samp{array}
command can be used to iterate through the elements of an array or string@footnote{Strings being a kind of array.  See @ref{Sequences Arrays Vectors,,,elisp,}
for more.}.
You can define custom aliases using the macro @code{loopy-defalias} (@ref{Custom Aliases}).

Similar to other libraries, many commands have an alias of the present
participle form (the ``-ing'' form).  A few examples are seen in the table below.

@multitable {aaaaaaaaa} {aaaaaaaaaaaa}
@headitem Command
@tab ``-ing'' Alias
@item @samp{set}
@tab @samp{setting}
@item @samp{list}
@tab @samp{listing}
@item @samp{collect}
@tab @samp{collecting}
@item @samp{numbers}
@tab @samp{numbering}
@end multitable

Some commands take optional keyword arguments.  For example, the command @samp{list}
can take a function argument following the keyword @samp{:by}, which affects how that
command iterates through the elements in the list.

For simplicity, the commands are described using the following notation:

@itemize
@item
If a command has multiple names, the names are separated by a vertical bar,
such as in @samp{set|expr}.
@item
@samp{VAR} is an unquoted symbol that will be used as a variable name, such as @samp{i}
in @samp{(list i my-list)}.
@item
@samp{FUNC} is a quoted Lisp function name, such as @code{#'my-func} or @code{'my-func}, a
variable whose value is a function, or a @code{lambda} expression.
@item
@samp{NAME} is an unquoted name of a loop (or, more accurately, of a @samp{cl-block}).
@item
@samp{EXPR} is a single Lisp expression, such as @samp{(+ 1 2)}, @samp{'(1 2 3)}, @samp{my-var},
or @samp{(some-function my-var)}.  @samp{EXPRS} means multiple expressions.  Really, we
are concerned with the value of the expression, not the expression itself.
@item
@samp{CMD} is a loop command, as opposed to a normal Lisp expression.
@samp{(list i '(1 2 3))}, @samp{(cycle 5)}, and @samp{(return-from outer-loop 7)}
are examples of loop commands.  @samp{CMDS} means multiple commands.
@item
Optional arguments are surround by brackets.  @samp{[EXPR]} is an optional
expression, and @samp{[CMD]} is an optional command.  By extension, @samp{[EXPRS]} is
equivalent to @samp{[EXPR [EXPR [...]]]}, and @samp{[CMDS]} to @samp{[CMD [CMD [...]]]}.
@item
Optional keyword arguments are shown as @samp{&key key1 key2 ...}, where @samp{key1},
@samp{key2}, and so on are the literal keywords.  Just like in normal Lisp
functions, command keywords must be prefixed by a colon (``:'').  For example,
the iteration command @samp{list} has a keyword argument @samp{by}, which can be given a
value using @samp{:by SOME-EXPRESSION}.
@end itemize


Generally, @samp{VAR} is initialized to @code{nil}, but not always.  This document tries
to note when that is not the case.

@menu
* Basic Destructuring::          How to destructure variables and values in loop commands.
* Generic Evaluation::           Setting variables, evaluating expressions, etc.
* Iteration::                    Iterating through sequences, etc.
* Accumulation::                 Accumulating values into new sequences, aggregating values, etc.
* Checking Conditions::          Testing whether a condition holds true.
* Control Flow::                 When to run loop commands.
* Sub-Loops::                    Running a loop within a loop.
@end menu

@node Basic Destructuring
@section Basic Destructuring

@cindex variable destructuring
Similar to features like @code{seq-let}, @code{cl-destructuring-bind}, and @code{pcase-let},
@code{loopy} is capable of destructuring values when assigning values to variables.
Destructuring in Loopy is similar to, but more featureful than, what is
provided in @samp{cl-lib}.

Some differences include:
@itemize
@item
Destructuring arrays
@item
Destructuring in accumulation commands (@ref{Accumulation})
@item
Destructuring in commands iterating through @code{setf}-able places in a sequence
(@ref{Sequence Reference Iteration})
@end itemize

In addition to what can be done in loop commands, several macros are available
for using Loopy's destructuring outside of @code{loopy} loops (@ref{Destructuring Macros}).

This section describes the basic built-in destructuring used by most loop
commands, such as @samp{set} and @samp{list}.  Destructuring in accumulation commands and
sequence reference commands works slightly differently, and is described more in
those sections.

The last thing to note is that @code{loopy} loops can be made to use alternative
destructuring systems, such as @code{seq-let} or @code{pcase-let}.  This is done by using
the @samp{flag} special macro argument (@ref{Using Flags}).  If you are familiar with the
package @samp{dash} @footnote{@uref{https://github.com/magnars/dash.el}} and its Clojure-style destructuring, consider trying
the flag @samp{dash} provided by the package @samp{loopy-dash}.

Below are two examples of destructuring in @code{cl-loop} and @code{loopy}.

@float Listing,org1a7fe46
@lisp
;; => (1 2 3 4)
(cl-loop for (i . j) in '((1 . 2) (3 . 4))
         collect i
         collect j)

;; => (1 2 3 4)
(loopy (list (i . j) '((1 . 2) (3 . 4)))
       (collect i)
       (collect j))
@end lisp
@caption{Destructuring values in a list.}
@end float

@float Listing,orgbe30df0
@lisp
;; => (1 2 3 4)
(cl-loop for elem in '((1 . 2) (3 . 4))
         for (i . j) = elem
         collect i
         collect j)

;; => (1 2 3 4)
(loopy (list elem '((1 . 2) (3 . 4)))
       (set (i . j) elem)
       (collect i)
       (collect j))
@end lisp
@caption{Destructuring values in assignment.}
@end float


You can use destructured assignment by passing an unquoted sequence of symbols
as the @samp{VAR} argument of a loop command.  Loopy supports destructuring lists and
arrays (which includes strings and vectors).
@itemize
@item
To destructure lists, use a list.
@item
To destructure arrays, use a vector.
@end itemize

This sequence of symbols can be shorter than the destructured sequence, @emph{but not
longer}.  If shorter, the unassigned elements of the list are simply ignored.

An element in the sequence @samp{VAR} can be one of the following:

@itemize
@item
A positional variable which will be bound to the corresponding element in the
sequence.  These variables can themselves be sequences, but must be of the
correct type.  Unlike @code{seq-let}, Loopy does not currently have a generic
syntax for sequences.

@lisp
;; ((1 2 3) (4 5 6))
(loopy (list [i (j k)] '([1 (2 3)] [4 (5 6)]))
       (collect (list i j k)))
@end lisp

@item
The symbol @samp{_}: The symbol @samp{_} (an underscore) means to avoid creating a
variable.  This can be more efficient.

@lisp
;; Only create the variables `a' and `c'.
;; => ((1 3) (4 6))
(loopy (list (a _ c) '((1 2 3) (4 5 6)))
       (collect (list a c)))

;; These two destructurings do the same thing,
;; and only bind the variable `a':
;; => (1 3)
(loopy (array (a) [(1 2) (3 4)])
       (collect a))

;; => (1 3)
(loopy (array (a . _) [(1 2) (3 4)])
       (collect a))
@end lisp

@item
The symbol @samp{&whole}: If @samp{&whole} is the first element in the sequence, then
the second element of the sequence names a variable that holds the entire
value of what is destructured.

This is the same as when used in a CL @code{lambda} list.

@lisp
;; See that the variable `both' holds the value of the entire
;; list element:
;; => (((1 2) 1 2)
;;     ((3 4) 3 4))
(loopy (list (&whole both i j)  '((1 2) (3 4)))
       (collect (list both i j)))

(mapcar (cl-function (lambda ((&whole both i j))
                       (list both i j)))
        '((1 2) (3 4)))
@end lisp

@item
The symbol @samp{&rest}: A variable named after @samp{&rest} contains the remaining
elements of the destructured value.  When destructuring lists, one can also
instead use dotted notation.  These variables can themselves be sequences.

This is the same as when used in @code{seq-let}.

@lisp
;; => ((1 [2 3]) (4 [5 6]))
(loopy (list [i &rest j] '([1 2 3] [4 5 6]))
       (collect (list i j)))

;; => ((1 2 3) (4 5 6))
(loopy (list [i &rest [j k]] '([1 2 3] [4 5 6]))
       (collect (list i j k)))

;; => ((1 (2 3)) (4 (5 6)))
(loopy (list (i . j) '((1 2 3) (4 5 6)))
       (collect (list i j)))

;; Works the same as above:
(loopy (list (i &rest j) '((1 2 3) (4 5 6)))
       (collect (list i j)))

;; The above using `seq-let':
(let ((result))
  (dolist (elem '((1 2 3) (4 5 6)))
    (seq-let [i &rest j] elem
      (push (list i j) result)))
  (reverse result))
@end lisp

@item
The symbol @samp{&key} or @samp{&keys}: Variables named after @samp{&key} are transformed
into keys whose values will be sought using @code{plist-get}, which returns @code{nil}
if the key isn't found in the list.

Currently, only lists support this destructuring.

@lisp
;; => ((1 2 nil) (4 5 nil))
(loopy (list (&key a b missing) '((:b 2 :c 3 :a 1)
                                  (:a 4 :b 5 :c 6)))
       (collect (list a b missing)))
@end lisp

If the key is not in the list, a default value can be provided by using a
two-item list of the variable and the default value.  If a default value is
provided, then keys are sought using @code{plist-member}. That way, a value of
@code{nil} for a key is not the same as a missing key.

@lisp
;; Note that `nil' is not the same as a missing value.
;; => ((1 2 nil 25) (4 5 24 25))
(loopy (list (&key a b (c 24) (missing 25)) '((:b 2 :c nil :a 1)
                                              (:a 4 :b 5)))
       (collect (list a b c missing)))
@end lisp

Keys are sought in values after those bound to positional variables, which can
be the same values bound to the variable named by @samp{&rest} when both are
used.

@lisp
;; Keys are only sought after positional variables:
;; => ((1 2 :k1 'ignored 3))
(loopy (array (a b c d &key k1) [(1 2 :k1 'ignored :k1 3)])
       (collect (list a b c d k1)))

;; If `&rest' is used, keys are sought only in that variable:
;; => ((1 (:k1 3) 3))
(loopy (array (a &rest b &key k1) [(1 :k1 3)])
       (collect (list a b k1)))
@end lisp

@samp{&key} and @samp{&rest} can be used in any order, but @samp{&key} must come before
the dot in dotted lists.

@lisp
;; => ((1 (:k1 3) 3))
(loopy (array (a &rest b &key k1) [(1 :k1 3)])
       (collect (list a b k1)))

(loopy (array (a &key k1 &rest b) [(1 :k1 3)])
       (collect (list a b k1)))

(loopy (array (a &key k1 . b) [(1 :k1 3)])
       (collect (list a b k1)))
@end lisp
@end itemize

@node Generic Evaluation
@section Generic Evaluation

@findex do
@table @asis
@item @samp{(do EXPRS)}
Evaluate multiple Lisp expressions, like a @samp{progn}.

You cannot include arbitrary code in the loop body in @code{loopy}.  Trying to do
so will result in errors, as the macro will attempt to interpret such code as
a command.

To use loopy commands in arbitrary code, use the macro @code{loopy-iter} instead
(@ref{The @code{loopy-iter} Macro}).

@lisp
(loopy (list i '(1 2 3))
       (do (message "%d" i)))
@end lisp
@end table

@findex set
@findex setting
@findex expr
@findex exprs
@table @asis
@item @samp{(set|expr VAR [EXPRS] &key init)}
Bind @samp{VAR} to each @samp{EXPR} in order.
Once the last @samp{EXPR} is reached, it is used repeatedly for the rest of the
loop.  With no @samp{EXPR}, @samp{VAR} is repeatedly bound to @code{nil}.

If @samp{INIT} is provided, use that as the initial value of @samp{VAR}.  This could
also be achieved by specifying a value using the @samp{with} special macro
argument.  When destructuring, each variable is initialized to @samp{INIT}, not
a destructured part of @samp{INIT}.

This command also has the aliases @samp{setting} and @samp{exprs}.

@quotation Note
@samp{set} does @emph{not} behave the same as @code{setq} in all situations.

While @samp{set} can take multiple arguments, it only assigns the value of one
expression to one variable during each iteration of the loop (unless using
destructuring).  It does not take pairs of variables and values in the same
way that @code{setq} does.

Furthermore, variables assigned by @samp{set} (and other commands) are by
default @code{let}-bound around the loop and generally initialized to @code{nil}.
This means that doing @samp{(set VAR EXPR)} will not, by default, affect
variables outside of the loop in the same way that using @samp{(do (setq VAR
  EXPR))} would.

@end quotation

@lisp
;; => '(1 2 3 3 3)
(loopy (cycle 5)
       (set i 1 2 3)
       (collect coll i)
       (finally-return coll))

;; => '(0 1 2 3 4)
(loopy (cycle 5)
       (set i 0 (1+ i))
       (collect coll i)
       (finally-return coll))

;; Note that `i' is initialized to 0, and set to 1 in
;; the middle of the first cycle of the loop.
;;
;; => ((0 1 2) (1 2 3))
(loopy (cycle 3)
       (collect befores i)
       (set i 1 (1+ i) :init 0)
       (collect afters i)
       (finally-return befores afters))

;; Note that using `with' has a similar effect.
;; => (0 1 2)
(loopy (with (i 0))
       (cycle 3)
       (collect i)
       (set i 1 (1+ i)))
@end lisp
@end table

@findex group
@findex command-do
@table @asis
@item @samp{(group|command-do [CMDS])}
Evaluate multiple loop commands, as if in a
@samp{progn}.  This is similar to @samp{do}, but runs commands instead of normal Lisp
expressions.  Currently, this command is only useful when used within the
@samp{if} command.

@lisp
;; Report whether an even number is found, or return the sum of
;; the list's elements.  To be clear, this is not an idiomatic example.

;; Returns sum:
;; => 9
(loopy (list i '(1 3 5))
       (if (cl-evenp i)
           (group
            (do (message "Even found."))
            (return i))
         (sum i)))

;; Returns the detected even number:
;; => 2
(loopy (list i '(1 3 2 5))
       (if (cl-evenp i)
           (command-do
            (do (message "Even found."))
            (return i))
         (sum i)))
@end lisp
@end table

@findex set-prev
@findex setting-prev
@findex prev-set
@findex prev-expr
@findex prev
@table @asis
@item @samp{(set-prev|prev-expr VAR VAL &key init back)}
Bind
@samp{VAR} to a value @samp{VAL} from a previous cycle in the loop.  @samp{VAR} is
initialized to @samp{INIT} or nil.  With @samp{BACK}, use the value from that many
cycles previous.  This command @emph{does not} work like a queue.

As in @samp{set}, when using destructuring, each variable is initialized to
@samp{INIT}, not a destructured part of @samp{INIT}.

This command also has the aliases @samp{setting-prev}, @samp{prev-set}, and @samp{prev}.

@lisp
;; => (nil 1 2 3 4)
(loopy (list i '(1 2 3 4 5))
       (set-prev j i)
       (collect j))

;; (nil nil nil 1 2)
(loopy (list i '(1 2 3 4 5))
       (set-prev j i :back 3)
       (collect j))

;; => ((7 7 1 3) (7 7 2 4))
(loopy (list i '((1 2) (3 4) (5 6) (7 8)))
       (set-prev (a b) i :back 2 :init 7)
       (collect c1 a)
       (collect c2 b)
       (finally-return c1 c2))

;; NOTE: `prev-expr' keeps track of the previous value of `i',
;;       even when `j' isn't updated.
;;
;; => (first-val first-val 2 2 4 4 6 6 8 8)
(loopy (numbers i :from 1 :to 10)
       (when (cl-oddp i)
         (set-prev j i :init 'first-val))
       (collect j))
@end lisp
@end table

@node Iteration
@section Iteration

Iteration commands bind local variables and determine when the loop ends.  If no
command sets an ending condition, then the loop runs forever.  Infinite loops
can be exited by using early-exit commands (@ref{Early Exit}) or boolean
commands (@ref{Checking Conditions}).

Iteration commands must occur in the top level of the @code{loopy} form or in a
sub-loop command (@ref{Sub-Loops}).  Trying to do something like the below will
signal an error.

@lisp
;; Signals an error:
(loopy (list i '(1 2 3 4 5))
       (when (cl-evenp i)
         ;; Can't use `list' in a `when'.
         ;; Will signal an error.
         (list j '(6 7 8 9 10))
         (collect j)))
@end lisp


In @code{loopy}, iteration commands are named after what they iterate through.  For
example, the @samp{array} and @samp{list} commands iterate through the elements of arrays
and lists, respectively.

@quotation Note
In general, iteration variables (such as the @code{i} and @code{j} above) are initialized
to @code{nil}.  For efficiency, some commands do not do this.  In such cases, the
initial value of an iteration variable can be set using the @samp{with} special macro
argument, but this can result in less efficient code.

@end quotation

@menu
* Generic Iteration::            Looping a certain number of times.
* Numeric Iteration::            Iterating through numbers.
* Sequence Iteration::           Iterating through sequences.
* Sequence Index Iteration::     Iterating through indices without accessing values.
* Sequence Reference Iteration:: Iterating through places/fields in sequences.
@end menu

@node Generic Iteration
@subsection Generic Iteration

@findex cycle
@findex cycling
@findex repeat
@findex repeating
@table @asis
@item @samp{(cycle|repeat [VAR] EXPR)}
Run the loop for @samp{EXPR} iterations.  If
specified, @samp{VAR} starts at 0, and is incremented by 1 at the end of each step
in the loop.  If @samp{EXPR} is 0, then the loop isn't run.

For efficiency, @samp{VAR} is not initialized to @code{nil}.  This can be overridden
using the @samp{with} special macro argument, which can result in slower code.

This command also has the aliases @samp{cycling} and @samp{repeating}.

@lisp
;; => (10 10 10)
(loopy (with (i 10))
       (cycle 3)
       (collect i))

;; => (10 0 10 1 10 2)
(loopy (with (i 10))
       (repeat j 3)
       (collect i)
       (collect j))

;; An argument of 0 stops the loop from running:
;; => nil
(loopy (cycle 0)
       (return 'return-command-ran))
@end lisp
@end table

@findex iter
@findex iterating
@table @asis
@item @samp{(iter [VAR] EXPR &key close yield-result)}
Iterate through the values
returned by an Emacs Lisp iterator (@ref{Generators,,,elisp,}).  @samp{EXPR} is an
iterator object produced by a calling a generator function.  If given, @samp{VAR}
holds the value yielded by the iterator. The loop ends when the iterator
finishes.

@samp{yield-result} is the optional second argument to the function @code{iter-next},
which is the value of @code{iter-yield} in the iterator (not to be confused with
the value yielded by calling @code{iter-next}).

@samp{close} is whether the generator should be  closed via @code{iter-close} after the
loop ends.  The default is @code{t}.  Note that Emacs will eventually close
un-closed, un-reachable generators during garbage collection.

For efficiency, when possible, @samp{VAR} is bound to the yielded value before each
step of the loop, which is used to detect whether the iterator signals that it
is finished.  This is not possible when destructuring.  You can override this
behavior by using the @samp{with} special macro argument, which can result in
slower code and tells the macro that the initial value of @samp{VAR} is meaningful
and to update @samp{VAR} during the loop.

This command also has the name @samp{iterating}.

@quotation Warning
The loop ends when the iterator finishes, which must be checked before the
code in loop body is run. To check whether a iterator is finished, @code{loopy}
checks whether it signals an error when trying to yield a value.

Because values are yielded before the next iteration step of the loop, trying
to yield more values from the iterator after the loop ends will result in lost
values.  One option for working around this is to use the generic command
@samp{set} with the function @code{iter-next} directly.

@end quotation

@lisp
;; With var:
;; => ((1 . 4) (2 . 5) (3 . 6))
(loopy (with (iter-maker (iter-lambda (x)
                           (while x
                             (iter-yield (pop x))))))
       (iter i (funcall iter-maker (list 1 2 3)))
       (iter j (funcall iter-maker (list 4 5 6)))
       (collect (cons i j)))

;; Without var:
;; => (1 2 3)
(loopy (with (iter-maker (iter-lambda ()
                           ;; These yielded values are all ignored.
                           (iter-yield 'first-yield)
                           (iter-yield 'second-yield)
                           (iter-yield 'third-yield))))
       (iter (funcall iter-maker))
       (set i 1 (1+ i))
       (collect i))
@end lisp
@end table

@node Numeric Iteration
@subsection Numeric Iteration

For iterating through numbers, there is the general @samp{numbers} command, and its
variants @samp{numbers-up} and @samp{numbers-down}.

@findex num
@findex nums
@findex number
@findex numbering
@findex numbers
@table @asis
@item @samp{(numbers|nums VAR [START [END [STEP]]] &key KEYS)}
Iterate
through numbers.  @samp{KEYS} is one or several of @samp{from}, @samp{upfrom}, @samp{downfrom},
@samp{to}, @samp{upto}, @samp{downto}, @samp{above}, @samp{below}, and @samp{by}.

This command also has the aliases @samp{num}, @samp{number}, and @samp{numbering}.

The command @samp{numbers} is used to iterate through numbers.  For example,
@samp{(numbers i :from 1 :to 10)} is similar to @samp{(list i (number-sequence 1 10))},
and @samp{(numbers i 3)} is similar to @samp{(set i 3 (1+ i))}.

For efficiency, @samp{VAR} is initialized to the starting numeric value, not @code{nil},
and is updated at the end of each step of the loop.  This can be overridden
using the @samp{with} special macro argument, which can result in slower code.

To balance convenience and similarity to other commands, @samp{numbers} has a
flexible argument list.  In its most basic form, it uses no keywords and takes
a starting value and an ending value.  The ending value is inclusive.

@lisp
;; => (1 2 3 4 5)
(loopy (numbers i :from 1 :to 5)
       (collect i))
@end lisp

If the ending value is not given, then the value is incremented by 1 without
end.

@lisp
;; => (7 8 9 10 11 12 13 14 15 16)
(loopy (cycle 10)
       (numbers i 7)
       (collect i))
@end lisp

To specify the step size, one can use an optional third argument (like in
Python's @code{range}) or the keyword @samp{:by} (like in @code{cl-loop}).  The value of the
optional third argument can be positive or negative. @emph{However}, in keeping
with @code{cl-loop}, the value for @samp{:by} should always be positive; other keyword
arguments then control whether the variable is incremented or decremented.

@lisp
;; => (1 3 5)
(loopy (numbers i :from 1 :to 5 :by 2)
       (collect i))

;; => (1 3 5)
(loopy (numbers i 1 5 2)
       (collect i))

;; => (7 9 11 13 15 17 19 21 23 25)
(loopy (cycle 10)
       (numbers i 7 :by 2)
       (collect i))

;; => (1 2.5 4.0)
(loopy (numbers i :from 1 :to 5 :by 1.5)
       (collect i))
@end lisp

By default, the variable's value starts at 0 and increases by 1.  To specify
whether the value should be increasing or decreasing when using the @samp{:by}
keyword, one can use the keywords @samp{:downfrom}, @samp{:downto}, @samp{:upfrom}, and
@samp{:upto}.  The keywords @samp{:from} and @samp{:to} don't by themselves specify a
direction.

@lisp
;; => (3 2 1)
(loopy (cycle 3)
       (numbers i :downfrom 3)
       (collect i))

;; => (0 -1 -2 -3)
(loopy (numbers i :downto -3)
       (collect i))

;; => (10 9 8 7 6 5 4 3 2)
(loopy (numbers i :downfrom 10 :to 2)
       (collect i))

;; => (10 8 6 4 2)
(loopy (numbers i :from 10 :downto 2 :by 2)
       (collect i))

;; Produced code is not as efficient as above:
;; => (10 8 6 4 2)
(loopy (numbers i :from 10 :to 2 -2)
       (collect i))

;; => (1 2 3 4 5 6 7)
(loopy (numbers i :from 1 :upto 7)
       (collect i))
@end lisp

To specify an @emph{exclusive} ending value, use the keywords @samp{:below} for
increasing values and @samp{:above} for decreasing values.

@lisp
;; => (1 2 3 4 5 6 7 8 9)
(loopy (numbers i :from 1 :below 10)
       (collect i))

;; Same as
(loopy (set i 1 (1+ i))
       (while (< i 10))
       (collect i))

;; => (10 9 8 7 6 5 4 3 2)
(loopy (numbers i :from 10 :above 1)
       (collect i))

;; => (0 -1 -2)
(loopy (numbers i :above -3)
       (collect i))
@end lisp

@quotation Note
Because the @code{loopy} macro can't test the value of the step size ahead of time,
being more explicit by using the keyword parameters can produce faster code.

@end quotation
@end table


If you prefer using positional arguments to keyword arguments, you can use the
commands @samp{numbers-up} and @samp{numbers-down} to specify directions.  These commands
are simple wrappers of the above @samp{numbers} command.

@findex numbers-down
@findex numbering-down
@table @asis
@item @samp{(numbers-down|nums-down VAR START [END] &key by)}
Equivalent to @samp{(numbers
  VAR START [:downto END] &key by)}.  This command exists only for convenience.

This command also has the aliases @samp{numsdown} and @samp{numbering-down}.

@lisp
;; => (10 8 6 4 2)
(loopy (numbers-down i 10 1 :by 2)
       (collect i))

;; => (10 8 6 4 2)
(loopy (numbers-down i 10 1 2)
       (collect i))
@end lisp
@end table

@findex numbers-up
@findex numbering-up
@table @asis
@item @samp{(numbers-up|nums-up VAR START [END] &key by)}
Equivalent to @samp{(numbers VAR
  START [END] &key by)}.  This command exists only for convenience.

This command also has the aliases @samp{numsup} and @samp{numbering-up}.

@lisp
;; => (1 3 5 7 9)
(loopy (numbers-up i 1 10 :by 2)
       (collect i))

;; => (1 3 5 7 9)
(loopy (numbers-up i 1 10 2)
       (collect i))
@end lisp
@end table

@node Sequence Iteration
@subsection Sequence Iteration

These commands provide various ways to iterate through sequences
(@ref{Sequences Arrays Vectors,,,elisp,}).

@cindex sequence element distribution
Instead of iterating through just one sequence, the @samp{array}, @samp{list}, and @samp{seq}
commands can be given multiple sequences of various sizes.  In such cases, the
elements of the sequences are @dfn{distributed}, like in the distributive
property from mathematics.  A new sequence of distributed elements is created
before the loop runs, and that sequence is used for iteration instead of the
source sequences.  As seen in the below example, the resulting behavior is
similar to that of nested loops.

@lisp
;; => ((1 3 6) (1 4 6) (1 5 6) (2 3 6) (2 4 6) (2 5 6))
(loopy (list i '(1 2) '(3 4 5) '(6))
       (collect i))

;; Gives the same result as this
(let ((result nil))
  (dolist (i '(1 2))
    (dolist (j '(3 4 5))
      (dolist (k '(6))
        (push (list i j k) result))))
  (nreverse result))

;; and this
(cl-loop for i in '(1 2)
         append (cl-loop for j in '(3 4 5)
                         append (cl-loop for k in '(6)
                                         collect (list i j k))))
@end lisp

The @samp{array} and @samp{sequence} commands can use the same keywords as the @samp{numbers}
command (@ref{Numeric Iteration}) for working with the index and choosing a range of
the sequence's elements through which to iterate.  In addition to those
keywords, they also have an @samp{index} keyword, which names the variable used to
store the accessed index during the loop.

@lisp
;; => ((1 . 9) (3 . 6) (5 . 5) (7 . 3) (9 . 1))
(loopy (array i [10 9 8 6 7 5 4 3 2 1] :from 1 :by 2 :index ind)
       (collect (cons ind i)))
@end lisp

Keep in mind that if used with sequence distribution, these keywords affect
iterating through the sequence of distributed elements.  That is, they do not
affect how said sequence is produced.  In the example below, see that @code{cddr} is
applied to the sequence of distributed elements.  It is @emph{not} applied to the
source sequences.

@lisp
;; This code creates the sequence of distributed elements
;; ((1 4) (1 5) (1 6) (2 4) (2 5) (2 6) (3 4) (3 5) (3 6))
;; and then moves through this sequence using `cddr'.
;;
;; => ((1 4) (1 6) (2 5) (3 4) (3 6))
(loopy (list i '(1 2 3) '(4 5 6) :by #'cddr)
       (collect i))

;; Not the same as:
;; => ((1 4) (1 6) (3 4) (3 6))
(loopy (list i '(1 3) '(4 6))
       (collect i))
@end lisp


@findex array
@findex string
@findex arraying
@findex stringing
@table @asis
@item @samp{(array|string VAR EXPR [EXPRS] &key KEYS)}
Loop through the
elements of the array @samp{EXPR}.  In Emacs Lisp, strings are arrays whose
elements are characters.

This command also has the aliases @samp{arraying} and @samp{stringing}.

@samp{KEYS} is one or several of @samp{from}, @samp{upfrom}, @samp{downfrom}, @samp{to}, @samp{upto},
@samp{downto}, @samp{above}, @samp{below}, @samp{by}, and @samp{index}.  @samp{index} names the variable
used to store the index being accessed.  For others, see the @samp{numbers} command.

If multiple arrays are given, then the elements of these arrays are
distributed into an array of lists.  In that case, the above keywords apply to
this new, resulting array of lists.

@lisp
(loopy (array i [1 2 3])
       (do (message "%d" i)))

;; => (1 3)
(loopy (array i [1 2 3 4] :by 2)
       (collect i))

;; Collects the integer values representing each character.
;; => (97 98 99)
(loopy (string c "abc")
       (collect c))

;; This is the same as using [(1 3) (1 4) (2 3) (2 4)].
;; => ((1 3) (1 4) (2 3) (2 4))
(loopy (array i [1 2] [3 4])
       (collect i))

;; => ((1 3) (2 3))
(loopy (array i [1 2] [3 4] :by 2)
       (collect i))
@end lisp
@end table

@findex cons
@findex conses
@findex consing
@table @asis
@item @samp{(cons|conses VAR EXPR &key by)}
Loop through the cons cells of @samp{EXPR}.
Optionally, find the cons cells via the function @samp{by} instead of @samp{cdr}.

For efficiency, when possible, @samp{VAR} is initialized to the value of @samp{EXPR},
not @code{nil}, and is updated at the end of each step in the loop.  This is not
possible when destructuring.  Such initialization can be overridden by using
the @samp{with} special macro argument, which can result in slower code.

This command also has the alias @samp{consing}.

@lisp
;; => ((1 2 3) (2 3) (3))
(loopy (cons i '(1 2 3))
       (collect coll i)
       (finally-return coll))

;; => ((1 2 3 4 5 6) (3 4 5 6) (5 6))
(loopy (cons i '(1 2 3 4 5 6) :by #'cddr)
       (collect coll i)
       (finally-return coll))
@end lisp
@end table

@findex list
@findex listing
@findex each
@table @asis
@item @samp{(list|each VAR EXPR [EXPRS] &key by)}
Loop through each element of the
list @samp{EXPR}.  Optionally, update the list by @samp{by} instead of @samp{cdr}.

This command also has the alias @samp{listing}.

If multiple lists are given, distribute the elements of the lists into one new
list.  In such cases, @samp{by} applies to the new list, not the arguments of the
command.

@lisp
;; => (1 4 7 10).
(loopy (list i (number-sequence 1 10 3))
       (collect i))

;; => (1 3 5)
(loopy (list i '(1 2 3 4 5 6) :by #'cddr)
       (collect i))

;; => ((1 4) (1 5) (1 6) (2 4) (2 5) (2 6) (3 4) (3 5) (3 6))
(loopy (list i '(1 2 3) '(4 5 6))
       (collect i))

;; => ((1 4) (1 6) (2 5) (3 4) (3 6))
(loopy (list i '(1 2 3) '(4 5 6) :by #'cddr)
       (collect i))
@end lisp
@end table

@findex map
@findex map-pairs
@findex mapping
@findex mapping-pairs
@table @asis
@item @samp{(map|map-pairs VAR EXPR &key unique)}
Iterate through the dotted key-value
pairs of map @samp{EXPR}, using the function @code{map-pairs} from the @samp{map.el} library.
This library generalizes working with association lists (``alists''), property
lists (``plists''), hash-tables, and vectors.

This command also has the aliases @samp{mapping} and @samp{mapping-pairs}.

In each dotted pair assigned to @samp{VAR}, the @code{car} is the key and the @code{cdr} is
the value.

By default, only the unique keys are used.  To disable this deduplication,
pass @code{nil} to the @samp{unique} keyword argument.

In general, as a map in not necessarily a sequence, you should not rely on the
order in which the key-value pairs are found.  There is no guarantee that they
be in the same order each time.

These pairs are created before the loop begins.  In other words, the map
@samp{EXPR} is not processed progressively, but all at once.  Therefore, this
command can have a noticeable start-up cost when working with very large maps.

@lisp
;; => ((a . 1) (b . 2))
(loopy (map pair '((a . 1) (b . 2)))
       (collect pair))

;; => ((a b) (1 2))
(loopy (map (key . value) '((a . 1) (b . 2)))
       (collect keys key)
       (collect values value)
       (finally-return keys values))

;; => ((:a :b) (1 2))
(loopy (map (key . value) '(:a 1 :b 2))
       (collect keys key)
       (collect values value)
       (finally-return keys values))

;; NOTE: For vectors, the keys are indices.
;; => ((0 1) (1 2))
(loopy (map (key . value) [1 2])
       (collect keys key)
       (collect values value)
       (finally-return keys values))

;; => ((a b) (1 2))
(let ((my-table (make-hash-table)))
  (puthash 'a 1 my-table)
  (puthash 'b 2 my-table)

  (loopy (map (key . value) my-table)
         (collect keys key)
         (collect values value)
         (finally-return keys values)))
@end lisp

Depending on how a map is created, a map might repeat a key multiple times.
Currently, the function @code{map-pairs} returns such keys.  By default, the
@code{loopy} command @samp{map-pairs} ignores such duplicate keys.  This is for two
reasons:
@enumerate
@item
This is more consistent with the command @samp{map-ref}, for which such
duplicates are more likely to cause errors.
@item
For maps that can have duplicate keys (such as alists and plists), there
are already other iteration commands (such as @samp{list} and @samp{cons}) that
explicitly include the duplicates.
@end enumerate

Again, this can be disabled by setting @samp{unique} to nil.

@lisp
;; A comparison of setting the `unique' key to nil:
;;
;; => ((a 1) (a 2) (b 3))
(loopy (map (key . val) '((a . 1) (a . 2) (b . 3)) :unique nil)
       (collect (list key val)))

;; In this case, `list' has the same result:
;; => ((a 1) (a 2) (b 3))
(loopy (list (key . val) '((a . 1) (a . 2) (b . 3)))
       (collect (list key val)))

;; => ((:a 1) (:a 2) (:b 3))
(loopy (map (key . val) '(:a 1 :a 2 :b 3) :unique nil)
       (collect (list key val)))

;; In this case, `cons' has the same result:
;; => ((:a 1) (:a 2) (:b 3))
(loopy (cons (key val) '(:a 1 :a 2 :b 3) :by #'cddr)
       (collect (list key val)))
@end lisp
@end table

@findex seq
@findex sequence
@findex seqing
@findex sequencing
@table @asis
@item @samp{(sequence|seq VAR EXPR [EXPRS] &key KEYS)}
Loop through the sequence
@samp{EXPR}, binding @samp{VAR} to the elements of the sequence (see @ref{Sequences Arrays Vectors,elisp#Sequences
Arrays Vectors,,elisp,}).  This is a more generic form of the commands @samp{list} and
@samp{array}, though it is somewhat less efficient.  These sequences should not be
confused with those generic sequences as understood by the library @samp{seq.el}.

This command also has the aliases @samp{seqing} and @samp{sequencing}.

@samp{KEYS} is one or several of @samp{from}, @samp{upfrom}, @samp{downfrom}, @samp{to}, @samp{upto},
@samp{downto}, @samp{above}, @samp{below}, @samp{by}, and @samp{index}.  @samp{index} names the variable
used to store the index being accessed.  For others, see the @samp{numbers} command.

If multiple sequences are given, then these keyword arguments apply to the
resulting sequence of distributed elements.

@lisp
;; => (1 2 3)
(loopy (sequence i [1 2 3])
       (collect coll i)
       (finally-return coll))

;; => (0 2 4)
(loopy (sequence i [0 1 2 3 4 5] :by 2)
       (collect i))

;; => (1 3 5)
(loopy (sequence i [0 1 2 3 4 5 6]
            :by 2 :from 1 :to 5)
       (collect i))

;; => (5 3 1)
(loopy (sequence i '(0 1 2 3 4 5 6)
            :downfrom 5 :by 2 :to 1)
       (collect i))

;; => ((1 3) (1 4) (2 3) (2 4))
(loopy (sequence i [1 2] '(3 4))
       (collect i))

;; => ((1 3) (2 3))
(loopy (sequence i [1 2] '(3 4) :by 2)
       (collect i))
@end lisp
@end table

@node Sequence Index Iteration
@subsection Sequence Index Iteration

This command is for iterating through a sequence's indices without accessing
the actual values of that sequence.  This is helpful if you know ahead of
time that you are only interested in a small subset of the sequence's
elements.

As with the @samp{array} and @samp{seq} commands, the @samp{seq-index} command can use the
same keywords as the @samp{numbers} command (@ref{Numeric Iteration}) for working with
the index and choosing a range of the sequence elements through which to
iterate.

@findex seq-index
@findex seqi
@findex seqing-index
@findex sequencing-index
@findex seqi
@findex array-index
@findex arraying-index
@findex arrayi
@findex list-index
@findex listing-index
@findex listi
@findex string-index
@findex stringing-index
@findex stringi
@table @asis
@item @samp{(seq-index VAR EXPR &key KEYS)}
Iterate through the indices of @samp{EXPR}.

There is only one implementation of this command; there are no
type-specific versions.  This command also has the following aliases:
@itemize
@item
@samp{array-index}, @samp{arraying-index}, @samp{arrayi}
@item
@samp{list-index}, @samp{listing-index}, @samp{listi}
@item
@samp{string-index}, @samp{stringing-index}, @samp{stringi}
@item
@samp{sequence-index}, @samp{sequenceing-index}, @samp{sequencei}, @samp{seqi}, @samp{seqing-index}
@end itemize
@end table


The aliases @samp{seqi}, @samp{arrayi}, @samp{listi}, and @samp{stringi} are similar to the
aliases @samp{seqf}, @samp{arrayf}, @samp{listf}, and @samp{stringf} of the @samp{seq-ref} command.

@samp{KEYS} is one or several of @samp{from}, @samp{upfrom}, @samp{downfrom}, @samp{to}, @samp{upto},
@samp{downto}, @samp{above}, @samp{below}, and @samp{by}.  For their meaning, see the @samp{numbers}
command.  This command is very similar to @samp{numbers}, except that it can
automatically end the loop when the final element is reached.  With
@samp{numbers}, one would first need to explicitly calculate the length of the
sequence.

Similar to @samp{numbers}, for efficiency, @samp{VAR} is initialized to the starting
index value, not @code{nil}, and is updated at the end of each step of the loop.
This can be overridden using the @samp{with} special macro argument, which can
result in slower code.

@lisp
;; => (97 98 99 100 101 102)
(loopy (with (my-string "abcdef"))
       (string-index idx my-string)
       (collect (aref my-string idx)))

;; Works the same as
(loopy (with (my-string "abcdef"))
       (numbers idx :from 0 :below (length my-string))
       (collect (aref my-string idx)))
@end lisp

This command does not support destructuring.

@lisp
;; => (0 1 2)
(loopy (seq-index i [1 2 3])
       (collect i))

;; => (0 1 2)
(loopy (array-index i "abc")
       (collect i))

;; => (0 1 2)
(loopy (list-index i '(1 2 3))
       (collect i))

;; => (8 6 4 2)
(loopy (with (my-seq [0 1 2 3 4 5 6 7 8 9 10]))
       (seq-index idx my-seq :from 8 :downto 1 :by 2)
       (collect (elt my-seq idx)))
@end lisp

@node Sequence Reference Iteration
@subsection Sequence Reference Iteration

These commands all iterate through @code{setf}-able places as generalized
variables (@ref{Generalized Variables,,,elisp,}).  These generalized variables
are commonly called ``references'', ``fields'', or ``places''.  The below example
demonstrates using @code{(nth 1 my-list)} and @code{(aref my-array 1)} as @code{setf}-able
places.

@lisp
;; => (1 99 3 4 5)
(let ((my-list '(1 2 3 4 5)))
  (setf (nth 1 my-list) 99)
  my-list)

;; => [(1 2 3) (4 . 99)]
(let ((my-array [(1 2 3) (4 5 6)]))
  (setf (cdr (aref my-array 1)) 99)
  my-array)
@end lisp

Like other commands, ``field'' or ``reference'' commands can also use
destructuring, in which case the fields/places of the sequence are
destructured into ``sub-fields'', like the @code{cdr} of the second array element
in the example above.

@quotation Caution
Be aware that using @code{setf} on an array sub-sequence named by @samp{&rest}
will only overwrite values, not truncate or grow the array.

@end quotation

@quotation Warning
Unfortunately, not all kinds of recursive destructuring work on references.
This is a limitation of how generic setters are implemented, and is not
specific to @code{loopy}.

Currently, the variable after @samp{&rest} in arrays cannot be recursive.

@end quotation

As with the @samp{array} and @samp{seq} commands, the @samp{array-ref} and @samp{seq-ref}
commands can use the same keywords as the @samp{numbers} command
(@ref{Numeric Iteration}) for working with the index and choosing a range of the
sequence elements through which to iterate.  In addition to those keywords,
they also have an @samp{index} keyword, which names the variable used to store
the accessed index during the loop.

@findex array-ref
@findex arrayf
@findex string-ref
@findex stringf
@findex arraying-ref
@findex arrayingf
@findex stringing-ref
@findex stringingf
@findex across-ref
@table @asis
@item @samp{(array-ref|arrayf|string-ref|stringf VAR EXPR &key KEYS)}
Loop
through the elements of the array @samp{EXPR}, binding @samp{VAR} as a @code{setf}-able
place.

@samp{KEYS} is one or several of @samp{from}, @samp{upfrom}, @samp{downfrom}, @samp{to}, @samp{upto},
@samp{downto}, @samp{above}, @samp{below}, @samp{by}, and @samp{index}.  @samp{index} names the variable
used to store the index being accessed.  For others, see the @samp{numbers}
command.

@lisp
;; => "aaa"
(loopy (with (my-str "cat"))
       (array-ref i my-str)
       (do (setf i ?a))
       (finally-return my-str))

;; => "0a2a4a6a89"
(loopy (with (my-str "0123456789"))
       (array-ref i my-str :from 1 :by 2 :to 7)
       (do (setf i ?a))
       (finally-return my-str))

;; Works the same as
(loopy (with (my-str "0123456789"))
       (numbers idx 1 7 :by 2)
       (do (setf (aref my-str idx) ?a))
       (finally-return my-str))
@end lisp
@end table

@findex list-ref
@findex listing-ref
@findex listf
@findex listingf
@findex in-ref
@table @asis
@item @samp{(list-ref|listf VAR EXPR &key by)}
Loop through the elements of
the list @samp{EXPR}, binding @samp{VAR} as a @code{setf}-able place.  Optionally, update
the list via function @samp{by} instead of @code{cdr}.

@lisp
;; => (7 7 7)
(loopy (with (my-list '(1 2 3)))
       (list-ref i my-list)
       (do (setf i 7))
       (finally-return my-list))

;; Works similar to
(loopy (with (my-list '(1 2 3)))
       (numbers idx :below (length my-list))
       (do (setf (nth idx my-list) 7))
       (finally-return my-list))

;; => (7 2 7)
(loopy (with (my-list '(1 2 3)))
       (list-ref i my-list :by #'cddr)
       (do (setf i 7))
       (finally-return my-list))

;; => ([1 7] [2 7])
(loopy (with (my-list '([1 2] [2 3])))
       (list-ref [_ i] my-list)
       (do (setf i 7))
       (finally-return my-list))
@end lisp
@end table

@findex map-ref
@findex mapping-ref
@findex mapf
@findex mappingf
@table @asis
@item @samp{(map-ref|mapf VAR EXPR &key key unique)}
Loop through the values of
map @samp{EXPR}, binding @samp{VAR} as a @code{setf}-able place.  Like the command @samp{map},
this command uses the @samp{map.el} library.

@samp{key} is a variable in which to store the current key for the @code{setf}-able
place referred to by @samp{VAR}.  This is similar to the @samp{index} keyword
parameter of other commands.

Like in the command @samp{map}, the keys of the map are generated before the
loop is run, which can be expensive for large maps.

Similar to @samp{map}, any duplicate keys are ignored by default.  This can be
disabled by setting the @samp{unique} keyword argument to nil, though note that
using such duplicate keys will still refer to the value of the first
occurence.  There is no way to use a duplicate key to refer to the
duplicate's value.

@lisp
;; Duplicate keys are ignored by default.
;;
;; => (:a 8 :a 'ignored :b 10)
(loopy (with (map (list :a 1 :a 'ignored :b 3)))
       (map-ref i map)
       (do (cl-incf i 7))
       (finally-return map))

;; If duplicates are not ignored:
;;
;; => (:a 15 :a ignored :b 10)
(loopy (with (map (list :a 1 :a 'ignored :b 3)))
       (map-ref i map :unique nil)
       (do (cl-incf i 7))
       (finally-return map))

;; Getting the key using `key':
;;
;; => (((cat . 7)       ; The map itself
;;      (dog . 7)
;;      (zebra . 7))
;;     (cat dog zebra)) ; The keys
(loopy (with (map (list (cons 'cat 1)
                        (cons 'dog 2)
                        (cons 'zebra 3))))
       (map-ref i map :key my-key)
       (do (setf i 7))
       (collect my-key)
       (finally-return map loopy-result))
@end lisp
@end table

@findex seq-ref
@findex seqf
@findex sequence-ref
@findex sequencing-ref
@findex sequencef
@findex sequencingf
@findex elements-ref
@table @asis
@item @samp{(sequence-ref|sequencef|seq-ref|seqf VAR EXPR &key KEYS)}
Loop
through the elements of the sequence @samp{EXPR}, binding @samp{VAR} as a
@code{setf}-able place.

@samp{KEYS} is one or several of @samp{from}, @samp{upfrom}, @samp{downfrom}, @samp{to}, @samp{upto},
@samp{downto}, @samp{above}, @samp{below}, @samp{by}, and @samp{index}.  @samp{index} names the variable
used to store the index being accessed.  For others, see the @samp{numbers}
command.

@lisp
;; => (7 7 7 7)
(loopy (with (my-seq (list 1 2 3 4)))
       (sequence-ref i my-seq)
       (do (setf i 7))
       (finally-return my-seq))

;; => (0 cat 2 cat 4 cat 6 cat 8 cat)
(loopy (with (my-list (list 0 1 2 3 4 5 6 7 8 9)))
       (sequence-ref i my-list :from 1 :by 2 )
       (do (setf i 'cat))
       (finally-return my-list))

;; => "0123456a8a"
(loopy (with (my-str (copy-sequence "0123456789")))
       (sequence-ref i my-str :downto 6 :by 2 )
       (do (setf i ?a))
       (finally-return my-str))
@end lisp
@end table

@node Accumulation
@section Accumulation

Accumulation commands are used to accumulate or aggregate values into a
variable, such as creating a list of values or summing the elements in a
sequence.

If needed, you can refer to the same accumulation variable in multiple
accumulation commands.

@lisp
;; => (1 6 2 7 3 8)
(loopy (list i '(1 2 3))
       (collect coll i)
       (collect coll (+ i 5))
       (finally-return coll))
@end lisp

@quotation Note
Keep in mind that it is an error to modify accumulation variables outside of
accumulation commands.  This restriction allows accumulations to be much faster.

@end quotation

Like with other loop commands, variables created by accumulation commands (such
as @samp{coll} in the above example) are initialized to @code{nil} unless stated
otherwise.  When otherwise, such as for the commands @samp{sum} and @samp{multiply}, the
initial value of a variable depends on the first accumulation command using that
variable in the arguments given to the macro.

@lisp
;; => 27
(loopy (numbers i :from 1 :to 3)
       (sum my-accum i) ; Starts at 0.
       (multiply my-accum i)
       (finally-return my-accum))

;; => 21
(loopy (numbers i  1 3)
       (multiply my-accum i) ; Starts at 1.
       (sum my-accum i)
       (finally-return my-accum))
@end lisp

@cindex accumulation destructuring
Similar to iteration commands, accumulation commands can also use destructuring.
In accumulation commands, the values resulting from destructuring are
accumulated, instead of the destructured value.

@lisp
;; => ((1 4) (2 5) (3 6))
(loopy (list elem '((1 2 3) (4 5 6)))
       (collect (coll1 coll2 coll3) elem)
       (finally-return coll1 coll2 coll3))

;; => (5 7 9)
(loopy (list elem '((1 2 3) (4 5 6)))
       (sum (sum1 sum2 sum3) elem)
       (finally-return sum1 sum2 sum3))

;; Returns the same values as above.
(loopy (list elem '((1 2 3) (4 5 6)))
       (set sum1 (cl-first elem)  (+ sum1 (cl-first elem)))
       (set sum2 (cl-second elem) (+ sum2 (cl-second elem)))
       (set sum3 (cl-third elem)  (+ sum3 (cl-third elem)))
       (finally-return sum1 sum2 sum3))
@end lisp


@cindex implied accumulation results
Like in @code{cl-loop}, you do not need to supply a variable name to accumulation
commands.  If no accumulation variable is given, then the accumulated value is
understood to be the return value of the loop.  These implied return values can
be overridden by using the the @samp{return} and @samp{return-from} loop commands or the
@samp{finally-return} macro argument.

@lisp
;; => (1 2 3)
(cl-loop for i from 1 to 3 collect i)

;; => (1 2 3)
(loopy (numbers i :from 1 :to 3) (collect i))
@end lisp

@vindex loopy-result
Unlike in @code{cl-loop}, this implied return value is bound to the variable
@code{loopy-result} after the loop completes, even when the loop is left early.  This
variable can be used in the @samp{after-do}, @samp{finally-do}, and @samp{finally-return}
special macro arguments.

@lisp
;; => (0 1 2 3 4 5)
(loopy (numbers i :from 1 :to 10)
       (when (> i 5) (leave))
       (collect i)
       (finally-return (cons 0 loopy-result)))
@end lisp

In general, you should not attempt to modify or use the value of @code{loopy-result}
during the loop, as it is not guaranteed to have a correct value when
efficiently building sequences.  For example, it is often faster to build a list
in reverse instead of appending to its end.  For some commands, such as those in
@ref{Numeric Accumulation} and @ref{Generic Accumulation}, this does not matter.

Be aware that explicitly named accumulation variables do not affect the implied
return value of a loop.  Such values must be returned explicitly, or they will
be ignored when the macro returns a value.  This limitation is needed for more
consistently handling the complexity that comes from allowing unknown kinds of
destructuring via the alternative destructuring systems.  This may change in the
future.

@lisp
;; See how the variable `my-explicit-variable' is ignored when
;; returning a final value:
;; => (1 2 3)
(loopy (list i '(1 2 3))
       (collect i)
       (collect my-explicit-variable (* 2 i)))
@end lisp

Therefore, when mixing implicit and explicit accumulation variables, you must
use the @samp{finally-return} special macro argument to return all of the
accumulation results.

@lisp
;; => ((1 2 3)  ; loopy-result
;;     (2 4 6)  ; my-other-collection
;;     (1 2 3)  ; car-coll
;;     (2 4 6)) ; cdr-coll
(loopy (list i '(1 2 3))
       (collect i)
       (set j (* 2 i))
       (collect my-other-collection j)
       (collect (car-coll . cdr-coll) (cons i j))
       (finally-return loopy-result
                       my-other-collection
                       car-coll cdr-coll))
@end lisp

@cindex accumulation compatibility
Like in @code{cl-loop}, when using implied variables, multiple accumulation commands
will use the same variable (@code{loopy-result}).  For all accumulation variables
used by multiple accumulation commands, you should make sure that the commands
are actually compatible.  If not, then @code{loopy} will raise an error.

For example, you should not try to accumulate @samp{collect} results and @samp{sum}
results into the same variable, as one cannot use a list as a number.  On the
other hand, @samp{sum} and @samp{multiply} are compatible, since they both act on numbers.

@lisp
;; Incompatible commands:
;; => ERROR
(loopy (numbers i :from 1 :to 3)
       (collect i)
       (sum i))

;; Compatible commands:
;; => 27
(loopy (numbers i :from 1 :to 3)
       (sum i)
       (multiply i))
@end lisp


By default, one must specify separate accumulation variables to be able to
accumulate into separate values.  This can make accumulation slower, because
@code{loopy} ensures that named accumulation variables (excluding the previously
mentioned @code{loopy-result}) have the correct value during the loop.  For example,
@code{loopy} will construct named accumulation variables containing lists in the
correct order, instead of using the more efficient @code{push}-@code{nreverse} idiom.
This behavior can be disabled by optimizing accumulations using the @samp{accum-opt}
special macro argument (@ref{Optimizing Accumulations}).

Below are examples of an optimized accumulation and an un-optimized
accumulation.  See that the example expansion of the un-optimized accumulation
is more complex and uses a slower way of building the accumulated list.

@lisp
;; Optimized accumulation:
;; => (1 3 2 6 3 9)
(loopy (accum-opt coll)
       (numbers i :from 1 :to 3)
       (collect coll i)
       (collect coll (* i 3))
       (finally-return coll))

;; Optimized example expansion:
(let* ((coll nil)
       (i 1)
       (nums-end192 3)
       (nums-increment191 1))
  (cl-block nil
    (while (<= i nums-end192)
      (setq coll (cons i coll))
      (setq coll (cons (* i 3) coll))
      (setq i (1+ i)))
    (setq coll (nreverse coll)))
  coll)
@end lisp


@lisp
;; Unoptimized accumulation:
;; => (1 3 2 6 3 9)
(loopy (numbers i :from 1 :to 3)
       (collect coll i)
       (collect coll (* i 3))
       (finally-return coll))

;; Unoptimized example expansion:
(let* ((coll nil)
       (coll-last-link-190 coll)
       (i 1)
       (nums-end189 3)
       (nums-increment188 1))
  (cl-block nil
    (while (<= i nums-end189)
      (cond
       (coll-last-link-190
        (setcdr coll-last-link-190 (list i))
        (setq coll-last-link-190 (cdr coll-last-link-190)))
       (coll
        (setq coll-last-link-190 (last coll))
        (setcdr coll-last-link-190 (list i))
        (setq coll-last-link-190 (cdr coll-last-link-190)))
       (t
        (setq coll (list i)
              coll-last-link-190 coll)))
      (cond
       (coll-last-link-190
        (setcdr coll-last-link-190 (list (* i 3)))
        (setq coll-last-link-190 (cdr coll-last-link-190)))
       (coll
        (setq coll-last-link-190 (last coll))
        (setcdr coll-last-link-190 (list (* i 3)))
        (setq coll-last-link-190 (cdr coll-last-link-190)))
       (t
        (setq coll (list (* i 3))
              coll-last-link-190 coll)))
      (setq i (1+ i))))
  coll)
@end lisp

@quotation Warning
You should not try to access implied (or optimized) accumulation results (for
example, @code{loopy-result}) while the loop is running.  Implied results are only
required to be correct after the loop ends (before code in @samp{else-do} is run),
allowing for more efficient code.

Furthermore, because using a @samp{return} or @samp{return-from} command overrides implied
return values, using these commands can prevent implied accumulation results
from being finalized.  Using the @samp{leave} command, which exits the loop without
returning a value, does not affect the correctness of implied results.

@end quotation

@menu
* Common Properties of Accumulation Commands::
* Generic Accumulation::         Accumulating function output.
* Numeric Accumulation::         Using and returning numbers.
* Sequence Accumulation::        Using and returning sequences.
* Other Accumulation Commands::
* Optimizing Accumulations::     Producing efficient accumulations.
@end menu

@node Common Properties of Accumulation Commands
@subsection Common Properties of Accumulation Commands

You will notice that each accumulation command has an alias of the command name
in the present participle form (the ``-ing'' form).  For example, instead of
``minimize'', you can use ``minimizing''.  Instead of ``sum'' and ``append'', you can
use ``summing'' and ``appending''.  This is similar to the behavior of @code{cl-loop},
and helps to avoid name collisions when using the @code{loopy-iter} macro (@ref{The @code{loopy-iter} Macro, , The
@code{loopy-iter} Macro}).

@cindex accumulation keyword arguments
Some accumulation commands have optional keyword parameters, which are listed
in the command's definition.  To avoid repetition, the common parameters are
all described below.

@cindex accumulation keyword at
@table @asis
@item @samp{at}
Where to place a value.  One of @samp{end}, @samp{start}, or @samp{beginning}
(equivalent to @samp{start}).  If ungiven, defaults to @samp{end}.  These positions
need not be quoted.
@end table

@cindex accumulation keyword into
@table @asis
@item @samp{into}
An alternative way to specify the variable into which to
accumulate values.  One would normally just give @samp{VAR} as the first
argument of the loop command, but if you wish, you can use this keyword
argument for a more @code{cl-loop}-like syntax.

As all accumulation commands support this keyword, it is not listed in
any command definition.
@end table

@cindex accumulation keyword test
@table @asis
@item @samp{test}
A function of two arguments, usually used to test for equality.
Most tests default to @code{equal}, like in other Emacs Lisp libraries.  This is
different from @code{cl-lib}, which mimics Common Lisp and prefers using @code{eql}.
@end table

@cindex accumulation keyword key
@table @asis
@item @samp{key}
A function of one argument, used to transform the inputs of
@samp{test}.
@end table

@cindex accumulation keyword init
@table @asis
@item @samp{init}
The initial value of @samp{VAR}.  For explicitly named variables, one
can use this argument or the @samp{with} special macro argument.
@end table

@cindex accumulation keyword result-type
@table @asis
@item @samp{result-type}
A sequence type into which @samp{VAR} is converted @emph{after the
loop is over}.  These types need not be quoted.  For example, @samp{'vector} and
@samp{vector} are both valid ways to specify the vector data type.  Commands using
the same variable must use the same type coercion.

This argument can be more convenient than writing out a call to @code{cl-coerce}
or @code{seq-into}.
@end table

The arguments to the @samp{test} and @samp{key} parameters can be quoted functions or
variables, just like when using @code{cl-union}, @code{cl-adjoin}, and so on.  @code{loopy}
knows how to expand efficiently for either case.

@node Generic Accumulation
@subsection Generic Accumulation

Generic accumulation commands accumulate the output of functions that receive
the accumulation variable.  They are very similar to updating a variable's value
using the @samp{set} command.

@findex set-accum
@findex setting-accum
@table @asis
@item @samp{(set-accum VAR EXPR &key init)}
Set the accumulation variable @samp{VAR} to the
value of @samp{EXPR}.  @samp{init} sets the initial value of @samp{VAR}, which defaults to
@code{nil}.

This command also has the alias @samp{setting-accum}.

This command is a basic wrapper around @samp{set} for only one value.  Because this
command cannot be optimized (as it does not construct a sequence), it is safe
to access the implicit variable @code{loopy-result} in @samp{EXPR}, so long as the
variable is not being modified by another command for which that would be
unsafe.

@lisp
;; => 16
(loopy (array i [1 2 3])
       (set-accum (+ loopy-result i) :init 10))

;; These are equivalent:

;; => 16
(loopy (array i [1 2 3])
       (set-accum my-sum (+ my-sum i) :init 10)
       (finally-return my-sum))

;; => 16
(loopy (array i [1 2 3])
       (set my-sum (+ my-sum i) :init 10)
       (finally-return my-sum))
@end lisp
@end table

@findex accumulate
@findex accumulating
@table @asis
@item @samp{(accumulate|accumulating VAR EXPR FUNC &key init)}
Accumulate the result
of applying function @samp{FUNC} to @samp{EXPR} and @samp{VAR}.  @samp{EXPR} and @samp{VAR} are used as
the first and second arguments to @samp{FUNC}, respectively.

This is a generic accumulation command in case the others don't meet your
needs.  It is similar in effect to using the command @samp{expr}.

@lisp
;; Call `(cons i my-accum)'
;;
;; => (2 1)
(loopy (list i '(1 2))
       (accumulate my-accum i #'cons :init nil)
       (finally-return my-accum))

;; Works mostly the same as the above:
(loopy (list i '(1 2))
       (set my-accum (cons i my-accum))
       (finally-return my-accum))

;; => ((3 1) (4 2))
(loopy (list i '((1 2) (3 4)))
       (accumulate (accum1 accum2) i #'cons :init nil)
       (finally-return accum1 accum2))
@end lisp

This command also has the alias @samp{callf2}.  It is similar to using the function
@code{cl-callf2}, except that the function argument is given last and must be
quoted.  This alias is intended to help users remember argument order.

@lisp
(loopy (list i '(1 2))
       (callf2 my-accum i #'cons :init nil)
       (finally-return my-accum))

;; Is the same as the above:
(loopy (with (my-accum))
       (list i '(1 2))
       (do (cl-callf2 cons i my-accum))
       (finally-return my-accum))
@end lisp
@end table

@findex reduce
@findex reducing
@table @asis
@item @samp{(reduce VAR EXPR FUNC &key init)}
Reduce @samp{EXPR} into @samp{VAR} by @samp{FUNC}.
@samp{FUNC} is called with @samp{VAR} as the first argument and @samp{EXPR} as the second
argument.  This is unlike @samp{accumulate}, which gives @samp{VAR} and @samp{EXPR} to @samp{FUNC}
in the opposite order (that is, @samp{EXPR} first, then @samp{VAR}).

This command also has the alias @samp{reducing}.

@samp{VAR} is initialized to @samp{INIT}, if provided, or @code{nil}.

This command is similar in effect to the @samp{set} command.

@lisp
;; = > 6
(loopy (list i '(1 2 3))
       (reduce my-reduction i #'+ :init 0)
       (finally-return my-reduction))

;; Works similarly to above:
(loopy (list i '(1 2 3))
       (set my-reduction (+ i my-reduction) :init 0)
       (finally-return my-reduction))

;; => 24
(loopy (list i '(1 2 3 4))
       (reduce i #'* :init 1))
@end lisp

This command also has the alias @samp{callf}.  It is similar to using the
function @code{cl-callf}, except that the function argument is given last and
must be quoted.  This alias is intended to help users remember argument
order.

@lisp
(loopy (list i '(1 2 3))
       (callf my-reduction i #'+ :init 0)
       (finally-return my-reduction))

;; Is similar to the above:
(loopy (with (my-reduction 0))
       (list i '(1 2 3))
       (do (cl-callf + my-reduction i))
       (finally-return my-reduction))
@end lisp
@end table

@node Numeric Accumulation
@subsection Numeric Accumulation

Numeric accumulation work on numbers, such as by repeatedly adding or
multiplying values together.

@findex count
@findex counting
@table @asis
@item @samp{(count VAR EXPR)}
Count the number of times that @samp{EXPR} evaluates to a
non-nil value.  @samp{VAR} starts at 0 and is incremented by 1 each time.

This command also has the alias @samp{counting}.

@lisp
;; => 3
(loopy (list i '(1 nil 3 nil 5))
       (count non-nil-count i)
       (finally-return non-nil-count))
@end lisp
@end table

@findex max
@findex maxing
@findex maximize
@findex maximizing
@table @asis
@item @samp{(maximize|max VAR EXPR)}
Repeatedly set @samp{VAR} to the greater of the values
@samp{VAR} and @samp{EXPR}.  @samp{VAR} starts at negative infinity (@code{-1.0e+INF}), so that
any other value should be greater that it.

This command also has the aliases @samp{maximizing} and @samp{maxing}.

@lisp
;; => 11
(loopy (list i '(1 11 2 10 3 9 4 8 5 7 6))
       (maximize my-max i)
       (finally-return my-max))
@end lisp
@end table

@findex min
@findex minimize
@findex minnning
@findex minimizing
@table @asis
@item @samp{(minimize|min VAR EXPR)}
Repeatedly set @samp{VAR} to the lesser of the values
@samp{VAR} and @samp{EXPR}.  @samp{VAR} starts at positive infinity (@code{1.0e+INF}), so that any
other value should be less than it.

This command also has the aliases @samp{minimizing} and @samp{minning}.

@lisp
;; => 0
(loopy (list i '(1 11 2 10 3 0 9 4 8 5 7 6))
       (minimize my-min i)
       (finally-return my-min))
@end lisp
@end table

@findex multiply
@findex multiplying
@table @asis
@item @samp{(multiply VAR EXPR)}
Repeatedly set @samp{VAR} to the product of
the values @samp{EXPR} and @samp{VAR}.  @samp{VAR} starts at 1.

This command also has the alias @samp{multiplying}.

@lisp
;; => 120
(loopy (list i '(1 2 3 4 5))
       (multiply 5-factorial i)
       (finally-return 5-factorial))
@end lisp
@end table

@findex sum
@findex summing
@table @asis
@item @samp{(sum VAR EXPR)}
Repeatedly set @samp{VAR} to the sum of the values of @samp{EXPR}
and @samp{VAR}.  @samp{VAR} starts at 0.

This command also has the alias @samp{summing}.

@lisp
;; => 10
(loopy (list i '(1 2 3 4))
       (sum my-sum i)
       (finally-return my-sum))
@end lisp
@end table

@node Sequence Accumulation
@subsection Sequence Accumulation

Sequence accumulation commands are used to join lists (such as @samp{union} and
@samp{append}) and to collect items into lists (such as @samp{collect}).

@findex adjoin
@findex adjoining
@table @asis
@item @samp{(adjoin VAR EXPR &key at test key init result-type)}
Repeatedly add @samp{EXPR}
to @samp{VAR} if it is not already present in the list.

This command also has the alias @samp{adjoining}.

@lisp
;; Without a test, defaults to `eql' as in `cl-adjoin'.
;; => ((1 . 1) (1 . 2) (1 . 2) (2 . 3))
(loopy (list i '((1 . 1) (1 . 2) (1 . 2) (2 . 3)))
       (adjoin i))

;; Using `equal' for the test.
;; => ((1 . 1) (1 . 2) (2 . 3))
(loopy (list i '((1 . 1) (1 . 2) (1 . 2) (2 . 3)))
       (adjoin i :test #'equal))

;; Using `=' for the test and `car' for the key.  This
;; treats '(1 . 2) as equivalent to '(1 . 1), so it
;; won't be added.
;;
;; => ((1 . 1) (2 . 3))
(loopy (list i '((1 . 1) (1 . 2) (1 . 2) (2 . 3)))
       (adjoin i :test #'= :key #'car))

;; Coerced to a vector /after/ the loop ends.
;; => [1 2 3 4]
(loopy (list i '(1 2 3 3 4))
       (adjoin my-var i :result-type 'vector)
       (when (vectorp my-var)
         (return 'is-vector))
       (finally-return my-var))

;; => [4 3 2 1]
(loopy (list i '(1 2 3 3 4))
       (adjoin my-var i :result-type 'vector :at 'start)
       (finally-return my-var))
@end lisp
@end table

@findex append
@findex appending
@table @asis
@item @samp{(append VAR EXPR &key at)}
Repeatedly concatenate @samp{EXPR} to @samp{VAR}, as if
by the function @code{append}.

This command also has the alias @samp{appending}.

@lisp
;; => '(1 2 3 4 5 6)
(loopy (list i '((1 2 3) (4 5 6)))
       (append coll i)
       (finally-return coll))

;; => (4 5 6 1 2 3)
(loopy (list i '((1 2 3) (4 5 6)))
       (append i :at start))
@end lisp
@end table

@findex collect
@findex collecting
@table @asis
@item @samp{(collect VAR EXPR &key result-type at)}
Collect the value of @samp{EXPR} into
the list @samp{VAR}.  By default, elements are added to the end of the list.

This command also has the alias @samp{collecting}.

@lisp
;; => '(1 2 3)
(loopy (list i '(1 2 3))
       (collect i))

;; => '((1 2 3) ((1) (1 2) (1 2 3)))
(loopy (list i '(1 2 3))
       ;; Collect `i' into `coll1'.
       (collect coll1 i)
       ;; Collect `coll1' into a generated variable.
       (collect coll1)
       (finally-return coll1 loopy-result))

;; => [1 2 3]
(loopy (list j '(1 2 3))
       (collect j :result-type 'vector))

;; => (3 2 1)
(loopy (list j '(1 2 3))
       (collect j :at start))

;; => (1 2 3)
(loopy (list j '(1 2 3))
       (collect j :at 'end))
@end lisp
@end table

@findex concat
@findex concating
@table @asis
@item @samp{(concat VAR EXPR &key at)}
Repeatedly @code{concat} the value of @samp{EXPR} onto
@samp{VAR}, as a string.  For concatenating values onto a vector, see the command
@samp{vconcat}.

This command also has the alias @samp{concating}.

@samp{VAR} is a string throughout the loop.  This differs from the behavior of
commands with the keyword argument @samp{result-type}, which coerces the resulting
sequence of accumulated values into a new type @emph{after} the loop completes.

@lisp
;; => "abc"
(loopy (list i '("a" "b" "c"))
       (concat str i)
       (finally-return str))

;; => ("da" "eb" "fc")
(loopy (list j '(("a" "b" "c") ("d" "e" "f")))
       (concat (str1 str2 str3) j :at 'start)
       (finally-return str1 str2 str3))
@end lisp
@end table

@findex nconc
@findex nconcing
@table @asis
@item @samp{(nconc VAR EXPR &key at)}
Repeatedly and @emph{destructively} concatenate the
value of @samp{EXPR} onto @samp{VAR} as if by using the function @code{nconc}.

This command also has the alias @samp{nconcing}.

@quotation Caution
@code{nconc} is a destructive operation that modifies @samp{VAR} directly
(@ref{Rearrangement,,,elisp,}).  This is important to keep in mind when working
with literal values, such as the list @samp{'(1 2 3)}, whose modification could
apply wherever that value is used (@ref{Self-Evaluating Forms,,,elisp,}).

@end quotation

@lisp
;; => '(1 2 3 4 5 6 7 8)
(loopy (list i '((1 2 3 4) (5 6 7 8)))
       (nconc my-new-list i)
       (finally-return my-new-list))

;; => '(3 3 3 2 2 1)
(loopy (list i (list (make-list 1 1)
                     (make-list 2 2)
                     (make-list 3 3)))
       (nconc i :at start))
@end lisp
@end table

@findex nunion
@findex nunioning
@table @asis
@item @samp{(nunion VAR EXPR &key test key at)}
Repeatedly and @emph{destructively} insert
into @samp{VAR} the elements of @samp{EXPR} which are not already present in @samp{VAR}.

This command also has the alias @samp{nunioning}.

@lisp
;; => (4 1 2 3)
(loopy (list i '((1 2) (2 3) (3 4)))
       (nunion var i)
       (finally-return var))

;; => ((a . 2))
(loopy (array i [((a . 1)) ((a . 2))])
       (nunioning var i :key #'car)
       (finally-return var))

;; => (4 2 (1 1) 3)
(loopy (list i '(((1 1) 2) ((1 1) 3) (3 4)))
       (nunioning var i :test #'equal)
       (finally-return var))

;; => ((1 2 3) (2 3 4))
(loopy (array i [((1 2) (2 3))
                 ((1 2 3) (3 4))])
       (nunion (var1 var2) i :test #'equal)
       (finally-return var1 var2))

;; => ((4 2) (1 2) (3 2))
(loopy (list i '(((1 2) (3 2)) ((1 1) (4 2))))
       (nunion i :at start :key #'car))
@end lisp
@end table

@findex prepend
@findex prepending
@table @asis
@item @samp{(prepend VAR EXPR)}
Repeatedly concatenate @samp{EXPR} onto the front of @samp{VAR},
as if by the function @code{append}.

This command also has the alias @samp{prepending}.

This command is interpreted by Loopy as @samp{(append VAR EXPR :at start)}, and is
normally described as such when reporting errors.  It exists for clarity and
convenience.

@lisp
;; => (5 6 3 4 1 2)
(loopy (array i [(1 2) (3 4) (5 6)])
       (prepend i))

;; => (4 3 2 1)
(let ((my-list '(1)))
  (loopy (without my-list)
         (array elem [(2) (3) (4)])
         (prepend my-list elem)
         (finally-return my-list)))
@end lisp
@end table

@findex push
@findex pushing
@findex push-into
@findex pushing-into
@table @asis
@item @samp{(push-into|push VAR EXPR)}
Collect the value of @samp{EXPR} into a list, adding
values to the front of @samp{VAR} as if by using the function @code{push}.

This command also has the alias @samp{pushing} and @samp{pushing-into}.

This command is interpreted by Loopy as @samp{(collect VAR EXPR :at start)}, and is
normally described as such when reporting errors.  It exists for clarity and
convenience.

@lisp
;; => (3 2 1)
(loopy (array i [1 2 3])
       (push my-list i)
       (finally-return my-list))
@end lisp
@end table

@findex union
@findex unioning
@table @asis
@item @samp{(union VAR EXPR &key test key at)}
Repeatedly insert into @samp{VAR} the
elements of the list @samp{EXPR} that are not already present in @samp{VAR}.

This command also has the alias @samp{unioning}.

@lisp
;; => (4 1 2 3)
(loopy (list i '((1 2) (2 3) (3 4)))
       (union var i)
       (finally-return var))

;; => ((a . 2))
(loopy (array i [((a . 1)) ((a . 2))])
       (unioning var i :key #'car)
       (finally-return var))

;; => (4 2 (1 1) 3)
(loopy (list i '(((1 1) 2) ((1 1) 3) (3 4)))
       (unioning var i :test #'equal)
       (finally-return var))

;; => ((1 2 3) (2 3 4))
(loopy (array i [((1 2) (2 3))
                 ((1 2 3) (3 4))])
       (union (var1 var2) i :test #'=)
       (finally-return var1 var2))

;; => ((4 2) (1 2) (3 2))
(loopy (list i '(((1 2) (3 2)) ((1 1) (4 2))))
       (union var i :at 'start :key #'car)
       (finally-return var))
@end lisp
@end table

@findex vconcat
@findex vconcating
@table @asis
@item @samp{(vconcat VAR EXPR)}
Repeatedly concatenate the value of @samp{EXPR} onto @samp{VAR}
via the function @code{vconcat}.  For concatenating values onto a string, see the
command @samp{concat}.

This command also has the alias @samp{vconcating}.

@samp{VAR} is a vector throughout the loop.  This differs from the behavior of
commands with the keyword argument @samp{result-type}, which coerces the
resulting sequence of accumulated values into a new type @emph{after} the loop
completes.

@lisp
;; => [1 2 3 4 5 6]
(loopy (list i '([1 2 3] [4 5 6]))
       (vconcat my-vector i)
       (finally-return my-vector))

;; => [4 5 6 1 2 3]
(loopy (list i '([1 2 3] [4 5 6]))
       (vconcat i :at 'start))
@end lisp
@end table

@node Other Accumulation Commands
@subsection Other Accumulation Commands

@findex find
@findex finding
@table @asis
@item @samp{(find VAR EXPR TEST &key ON-FAILURE)}
If @samp{TEST} is non-nil, the loop stops
and @samp{EXPR} is used as a returned value.  If @samp{TEST} is never non-nil, then
@samp{ON-FAILURE} is used as a returned value, if provided.

This command also has the alias @samp{finding}.

@samp{VAR} takes the value of @samp{EXPR} if @samp{TEST} is non-nil or @samp{ON-FAILURE} if the
loop completes successfully.  It is bound to @code{nil} during the loop.  As with
other accumulation commands, if @samp{VAR} is provided, then @samp{EXPR} is not used as
a return value.  Instead, it is assigned to @samp{VAR}, which must be returned
explicitly.

@lisp
;; => 3
(loopy (list i '(1 2 3))
       (finding i (> i 2)))

;; Equivalent to above.
(loopy (list i '(1 2 3))
       (when (> i 2) (return i)))

;; => nil
(loopy (list i '(1 2 3))
       (finding i (> i 4)))

;; Equivalent to above.
(loopy (list i '(1 2 3))
       (when (> i 4) (return i)))

;; => "not found"
(loopy (list i '(1 2 3))
       (finding i (> i 4) :on-failure "not found"))

;; Equivalent to above.
(loopy (list i '(1 2 3))
       (when (> i 4) (return i))
       (else-do (cl-return "not found")))

;; Does not display message.
;; => 2
(loopy (list i '(1 2 3))
       (finding i (= i 2) :into found)
       (after-do (message "found: %s" found))
       (finally-return found))

;; Equivalent to above.
(loopy (list i '(1 2 3))
       (when (= i 2)
         (set found i)
         (leave))
       (after-do (message "found: %s" found))
       (finally-return found))

;; Messages "found: 2" in echo area.
;; => 2
(loopy (list i '(1 2 3))
       (finding found i (= i 2))
       (finally-do (message "found: %s" found))
       (finally-return found))

;; Equivalent to above.
(loopy (list i '(1 2 3))
       (when (= i 2)
         (set found i)
         (leave))
       (finally-do (message "found: %s" found))
       (finally-return found))

;; => "not found"
(loopy (list i '(1 2 3))
       (finding whether-found i (> i 4) :on-failure "not found")
       (finally-return whether-found))

;; Equivalent to above.
(loopy (list i '(1 2 3))
       (when (> i 4)
         (set whether-found i)
         (leave))
       (else-do (setq whether-found "not found"))
       (finally-return whether-found))
@end lisp
@end table

@node Optimizing Accumulations
@subsection Optimizing Accumulations

@cindex optimizing accumulations
By default, named accumulation variables (excluding the automatically named
@code{loopy-result}) are accessible during the loop, and their values are always
correct during execution.  For example, lists are always in the correct order,
even when constructing linked lists in the reverse order would be more
efficient.

@lisp
;; Note how `coll' is always in the correct order:
;; => ((1 2 3)
;;     ((1) (1 2) (1 2 3)))
(loopy (array i [1 2 3])
       (collect coll i)
       (collect intermediate-values (copy-sequence coll))
       (finally-return coll intermediate-values))
@end lisp

Implied accumulation variables are not required to always be in the correct
order, so commands using such variables can produce more efficient code.

@lisp
;; Similar in efficiency to the below:
;; => (2 3 4 5 6 7 8 9 10 11 12 13 ...)
(loopy (list i (number-sequence 1 1000))
       (collect (1+ i)))

;; => (2 3 4 5 6 7 8 9 10 11 12 13 ...)
(let (result)
  (dolist (i (number-sequence 1 1000))
    (push (1+ i) result))
  (nreverse result))
@end lisp

The situation becomes more complex when commands place values at both sides of a
sequence.  In that case, @code{loopy} keeps track of the beginning @emph{and} the end
of the sequence.  @code{loopy} does @emph{not} merely append to the end of the resulting
list, since that would be much slower for large lists.

@lisp
;; `loopy' can be faster than the below `dolist' approach:
;; => (3 2 1 7 14 21)
(loopy (list i '(1 2 3))
       (collect i :at start)
       (collect (* i 7) :at end))

;; For large accumulations, this is slower than the above:
;; => (3 2 1 7 14 21)
(let (result)
  (dolist (i '(1 2 3))
    (setq result (cons i result)
          result (nconc result (list (* i 7)))))
  result)
@end lisp

In such cases, @code{loopy} will naively optimize placing values at whichever side of
the sequences appears to be more used.  In the example below, note that even
though the commands to insert values at the front of the list are never actually
run, @code{loopy} will still optimize for frontal insertions.  Here, @code{loopy} simply
counts that 2 commands seem to place values at the front of the list while only
1 command seems to place values at the end.

@lisp
;; This code optimizes for insertions at the front of the list:
;; => (1 2 3)
(loopy (list i '(1 2 3))
       (collect i :at end)
       (when nil
         (collect i :at start)
         (collect i :at start)))
@end lisp

The special macro argument @samp{accum-opt} can be used to better control these
optimizations (@ref{Special Macro Arguments}).  With it, you can (1) treat an explicit
variable as if it were implicit and optionally (2) specify which side of a
sequence you expect to use more.  The arguments passed to @samp{accum-opt} are either
symbols (such as @code{loopy-result}) or lists of a symbol and a position.  To be
clear, use of the variable @code{loopy-result} is always at least naively optimized
in the manner described above.

In the example below, see that
@enumerate
@item
Accumulation into the named variable @code{coll} has been explicitly optimized for
using the end of the sequence, despite there being more commands that use the
beginning of the sequence.
@item
Because accumulation into @code{coll} has been optimized, the order of values in
@code{coll} need not be correct during the loop.
@end enumerate


@lisp
;; This code optimizes for insertions at the end of `coll':
;; => ((23 13 22 12 21 11 1 2 3)
;;     ((1 11 21) (2 1 11 21 12 22) (3 2 1 11 21 12 22 13 23)))
(loopy (accum-opt (coll end))
       (list i '(1 2 3))
       (collect coll i :at end)
       (collect coll (+ 10 i) :at start)
       (collect coll (+ 20 i) :at start)
       (collect intermediate-values (copy-sequence coll))
       (finally-return coll intermediate-values))
@end lisp

The @samp{accump-opt} special macro argument can also be used with destructuring.
Because destructuring requires using named variables, such variables are by
default required to be ordered correctly during the loop.  If you do not require
that, you are recommended to use @samp{accum-opt} on those variables.

@lisp
;; => ((1 3)
;;     (2 4)
;;     ((1) (3 1))
;;     ((2) (4 2)))
(loopy (accum-opt a b)
       (array elem [(1 2) (3 4)])
       (collect (a b) elem)
       (collect intermediate-a (copy-sequence a))
       (collect intermediate-b (copy-sequence b))
       (finally-return a b intermediate-a intermediate-b))
@end lisp

@node Checking Conditions
@section Checking Conditions

@dfn{Boolean commands} are used to test whether a condition holds true
during the loop.  They work like a combination of iteration and accumulation
commands, in that values are stored in @code{loopy-result} and that can terminate the
loop.

The behavior and use of the boolean commands is a compromise between consistency
with other commands, similarity to how similar features are used in other
libraries, and convenience for how they are commonly used.  This gives us the
following:

@itemize
@item
@code{loopy-result} is used as the implicit return value of the loop.

@item
Like accumulation commands, the keyword @samp{:into} can be used the specify a
variable other than @code{loopy-result}.

@itemize
@item
Unlike accumulation commands, there is no non-keyword way to specify a
variable.  The first argument (the only required argument) of each boolean
command is a condition to check.

@item
The @samp{always} and @samp{never} commands must use the same variable to work
together correctly.  By default, the both use @code{loopy-result}.
@end itemize

@item
These commands exit the loop without forcing a value (@ref{Early Exit}).

@itemize
@item
Therefore, optimized accumulation variables can be finalized even when the
loop ends, as happens with the @samp{leave} command.

@item
However, because the boolean commands already use @code{loopy-result}, such
optimized accumulation variables must be created with the special macro
argument @samp{accum-opt} and must be used explicitly, as in the below example.
@end itemize
@end itemize


@lisp
;; A maybe unidiomatic example:
;; => (nil (1 3 5))
(loopy (accum-opt coll)
       (list i '(1 3 5 6 9))
       (always (cl-oddp i))
       (collect coll i)
       (finally-return loopy-result coll))

;; Same as above, but maybe more idiomatic:
;; => (nil (1 3 5))
(loopy (with (succes t))
       (list i '(1 3 5 6 9))
       (if (cl-oddp i)
           (collect i)
         (set success nil)
         (leave))
       (finally-return success loopy-result))

;; Works similarly, but forces the `nil' return value.
;; Returns the collection if `always' doesn't trigger an exit.
;; Attempting similar with CL's `iterate' will signal an error.
;; => nil
(cl-loop for i in '(1 3 5 6 9)
         always (cl-oddp i)
         collect i)
@end lisp

@quotation Warn
Using the command @samp{thereis} is incompatible with using the commands @samp{always} and
@samp{never}, as this would create conflicting initial values for the implicit return
value (both using @code{loopy-result}).

@end quotation

@findex always
@table @asis
@item @samp{(always EXPR &key into)}
Check the result of the condition @samp{EXPR}.  If the
condition evaluates to @code{nil}, end the loop.  Otherwise, the loop returns the
final value of the condition or @code{t} if the command is never run.

The steps are thus:
@enumerate
@item
The variable (by default, @code{loopy-result}) is initially bound to @code{t}, using
it as the implicit return value of the loop.
@item
When the condition is checked, the variable is bound to the value of
the condition.
@item
If the variable is @code{nil}, the loop is exited.
@item
If the loop completes successfully, then the variable is the final value
of the condition.  If the command is never run, then the variable will
remain @code{t}.
@end enumerate
@end table


@lisp
;; => t
(loopy (list i '(1 0 1 0 1))
       (always (< i 2)))

;; Returns the final value of the condition:
;; => 5
(loopy (list i '(1 0 1 0 1))
       (always (and (< i 2) 5)))

;; => nil
(loopy (list i '(1 0 1 0 1))
       (always (< i 1)))

;; NOTE: Here, the implicit return value is `t' because an
;;       `always' command was used, and that return value
;;       is never updated to "hello" because the `always'
;;       command is never actually run.
;;
;; => t
(loopy (list i '(1 1 1 1))
       (when nil
         (always (and (> i 5) "hello"))))
@end lisp

@findex never
@table @asis
@item @samp{(never EXPR &key into)}
Check the condition @samp{EXPR}.  If the condition is
ever non-nil, then the loop is exited and returns @code{nil}.  Otherwise the loop
returns @code{t}.

The steps are thus:
@enumerate
@item
The variable (by default, @code{loopy-result}) is initialized to @code{t} and used as
the loop's implicit return value.
@item
The value of the condition is checked.
@item
If the condition is non-nil, then the variable is set to @code{nil}
and the loop is ended via the @samp{leave} command.
@end enumerate
@end table


@quotation Note
Unlike the @samp{always} command, @samp{never} does not store any information in the
variable until it ends the loop.  Therefore, @samp{never} does not affect the
loop's implicit return value when using the @samp{always} command so long as the
conditions of @samp{never} are always @code{nil}.

Be aware, though, that this behavior depends on @samp{always} and @samp{never} using
the same variable.

@end quotation

@lisp
;; => t
(loopy (list i '(1 0 1 0 1))
       (never (= i 3)))

;; => nil
(loopy (list i '(1 0 1 0 1))
       (never (= i 0)))

;; This example taken from the documentation of CL's Iterate package.
;;
;; => 2, not t
(loopy (cycle 2)
       (always 2)
       (never nil))
@end lisp

@findex thereis
@table @asis
@item @samp{(thereis EXPR &key into)}
Check the result of the condition
@samp{EXPR}.  If the condition evaluates to a non-@code{nil} value, the loop returns
that value.  Otherwise, the loop returns nil.

The steps are thus:
@enumerate
@item
The variable (by default, @code{loopy-result}) is initialized to @code{nil} and used
as the implicit return value of the loop.
@item
The value of the condition is stored in the variable.
@item
If the value of the variable is non-nil, the loop exits.
@end enumerate
@end table


@lisp
;; => 3
(loopy (list i '(1 0 1 3 1))
       ;; Note: `and' returns the last value it evaluates.
       (thereis (and (> i 2) i)))

;; => nil
(loopy (list i '(1 0 1 0 1))
       (thereis (and (> i 2) i)))

;; => 7
(loopy (list i '(nil nil 3 nil))
       (thereis i)
       (finally-return (+ loopy-result 4)))
@end lisp

@node Control Flow
@section Control Flow

@menu
* Conditionals::                 Choosing if commands should run.
* Skipping Cycles::              Immediately beginning the next iteration.
* Early Exit::                   Leaving the loop early, with or without returning values.
@end menu

@node Conditionals
@subsection Conditionals

Conditional commands in @code{loopy} can take multiple sub-commands, and work like
their Lisp counterparts.  There is therefore no need for an @samp{and} command as
used in @code{cl-loop}.

@findex cond
@table @asis
@item @samp{(cond [(EXPR CMDS) [...]])}
Run the commands @samp{CMDS} following the first
non-nil condition @samp{EXPR}.  This is the @code{loopy} version of the @code{cond} special
form from normal Emacs Lisp.

@lisp
;; => '((2 4 6) (1 3 5) ("cat" "dog"))
(loopy (list i '(1 2 3 "cat" 4 5 6 "dog"))
       (cond
        ((not (numberp i)) (collect not-numbers i))
        ((cl-evenp i)      (collect evens i))
        (t                 (collect odds i)))
       (finally-return evens odds not-numbers))
@end lisp
@end table

@findex if
@table @asis
@item @samp{(if EXPR CMDS)}
Run the first command if @samp{EXPR} is non-nil.  Otherwise,
run the remaining commands.  This is the @code{loopy} version of the @code{if} special
form from normal Emacs Lisp.

@lisp
;; => '((1 3 5 7) (2 4 6) (3 3 3))
(loopy (sequence i [1 2 3 4 5 6 7])
       (if (cl-oddp i)
           (collect odds i)
         (collect evens i)
         (collect some-threes 3))
       (finally-return odds evens some-threes))
@end lisp
@end table

@findex when
@table @asis
@item @samp{(when EXPR CMDS)}
Run @samp{CMDS} only if @samp{EXPR} is non-nil.  This is the
@code{loopy} version of the @code{when} macro from normal Emacs Lisp.

@lisp
;; Get only the inner lists with all even numbers.
;; => '((2 4 6) (8 10 12) (16 18 20))
(loopy (list i '((2 4 6) (8 10 12) (13 14 15) (16 18 20)))
       (when (loopy (list j i)
                    (always (cl-evenp j)))
         (collect only-evens i))
       (finally-return only-evens))
@end lisp
@end table

@findex unless
@table @asis
@item @samp{(unless EXPR CMDS)}
Run @samp{CMDS} only if @samp{EXPR} is nil.  This is the @code{loopy}
version of the @code{unless} macro from normal Emacs Lisp.

@lisp
;; Get only the inner lists with all even numbers.
;; => '((2 4 6) (8 10 12) (16 18 20))
(loopy (list i '((2 4 6) (8 10 12) (13 14 15) (16 18 20)))
       (unless (loopy (list j i)
                      (thereis (cl-oddp j)))
         (collect only-evens i))
       (finally-return only-evens))
@end lisp
@end table

@node Skipping Cycles
@subsection Skipping Cycles

@findex skip
@findex continue
@findex skipping
@findex continuing
@table @asis
@item @samp{(skip|skipping|continue|continuing)}
Skip the remaining commands and
continue to the next loop iteration.

@lisp
;; => (2 4 6 8 12 14 16 18)
(loopy (sequence i (number-sequence 1 20))
       (when (zerop (mod i 10))
         (skip))
       (when (cl-evenp i)
         (push-into my-collection i))
       (finally-return (nreverse my-collection)))
@end lisp
@end table

@findex skip-from
@findex continue-from
@findex skipping-from
@findex continuing-from
@table @asis
@item @samp{(skip-from|skipping-from|continue-from|continuing-from NAME)}
Skip the
remaining commands and continue to the next loop iteration of the loop @samp{NAME}.

@lisp
;; => ((1 2 3) (7 8 9))
(loopy outer
       (array i [(1 2 3) (4 5 6) (7 8 9)])
       (loop (list j i)
             (if (= 5 j)
                 (skip-from outer)))
       (collect i))
@end lisp
@end table

@node Early Exit
@subsection Early Exit

The loop is contained in a @code{cl-block}, which can be exited by the function
@code{cl-return-from}.  Indeed, the @samp{return} and @samp{return-from} commands are just
wrappers around that function.

As with the @samp{finally-return} special macro argument, passing multiple return
values to those commands will return a list of those values.  If no value is
given, @code{nil} is returned.

The commands @samp{leave}, @samp{leave-from}, @samp{while}, and @samp{until} leave the current loop
without forcing a returned value.  Unlike the @samp{return} commands, they do not
stop the loop from returning any implied return values, such as the collections
in their respective examples.

@findex leave
@findex leaving
@table @asis
@item @samp{(leave|leaving)}
Leave the current loop without forcing a return value.

@lisp
;; => (1 2 3 4)
(loopy (list i '(1 2 3 4 5 6 7))
       (if (= i 5)
           (leave)
         (collect i)))
@end lisp
@end table

@findex leave-from
@findex leaving-from
@table @asis
@item @samp{(leave-from|leaving-from NAME)}
Leave the loop @samp{NAME} without forcing a
return value.  This command is equivalent to @samp{(at NAME (leave))} (@ref{Sub-Loops}).

@lisp
;; => ([2 4] [6 8])
(loopy outer
       (list i '([2 4] [6 8] [7 10]))
       (loopy (array j i)
              (when (cl-oddp j)
                ;; Equivalent to `(at outer (leave))'
                (leave-from outer)))
       (collect i))
@end lisp
@end table

@findex return
@findex returning
@table @asis
@item @samp{(return|returning [EXPRS])}
Leave the current loop, returning @samp{[EXPRS]}.

@lisp
;; => 6
(loopy (with  (j 0))
       (do (cl-incf j))
       (when (> j 5)
         (return j)))
@end lisp
@end table

@findex return-from
@findex returning-from
@table @asis
@item @samp{(return-from|returning-from NAME [EXPRS])}
Leave the loop @samp{NAME},
returning @samp{[EXPRS]}.

@lisp
;; => 'bad-val?
(loopy (named outer-loop)
       (list inner-list '((1 2 3) (1 bad-val? 1) (4 5 6)))
       (loopy (list i inner-list)
              (when (eq i 'bad-val?)
                (return-from outer-loop 'bad-val?))))
@end lisp
@end table

@findex while
@table @asis
@item @samp{(while COND)}
Leave the loop once @samp{COND} is false, without forcing a
return value.  @samp{(while COND)} is the same as @samp{(until (not COND))}.

@lisp
;; => (1 2 3 4)
(loopy (list i '(1 2 3 4 5 6 7))
       (while (not (= i 5)))
       (collect i))
@end lisp
@end table

@findex until
@table @asis
@item @samp{(until COND)}
Leave the loop once @samp{COND} is true, without forcing a return
value.  @samp{(until COND)} is the same as @samp{(while (not COND))}.

@lisp
;; => (1 2 3 4)
(loopy (list i '(1 2 3 4 5 6 7))
       (until (= i 5))
       (collect i))
@end lisp
@end table

@node Sub-Loops
@section Sub-Loops

The following commands exist to properly handle sub-loops.  Depending on
one's needs, trying to use a @code{loopy} macro call inside the @samp{do} command could
signal an error.  This is because arguments of the @samp{do} command are inserted
literally (that is, without interpretation or modification) into the expanded
code.  This means that using @code{loopy} inside the @samp{do} command cannot affect
any of the super-loop's generated code, such as variable declarations.  The
following commands do not have that problem, because their expansions are
processed during the expansion of the top-level macro.

@lisp
;; Raises an error:
(loopy (named outer)
       (list i '((1 2) (3 4) (5 6)))
       (do (loopy (list j i)
                  (when (= j 5)
                    (leave-from outer))))
       (collect i))

;; Works as expected:
;; => ((1 2) (3 4))
(loopy outer
       (list i '((1 2) (3 4) (5 6)))
       (loopy (list j i)
              (when (= j 5)
                (leave-from outer)))
       (collect i))
@end lisp

@findex loopy command
@table @asis
@item @samp{(loopy [SPECIAL-MACRO-ARGUMENTS or CMDS])}
Specifically wrap a call to
the @code{loopy} macro.

Don't confuse using this command with using calls to the macro @code{loopy}.
For example, the @samp{EXPR} parameter to loop commands is used literally, and
is not able to affect macro expansion.  Therefore, the warning at the start
of this section applies to @samp{EXPR} parameters as well.  This is demonstrated
in the example below.

@lisp
(loopy outer
       (list i '(1 2 3))
       ;; This is the macro `loopy', not the loop command.
       ;; Therefore, the warning about macro expansion applies,
       ;; and this signals an error.
       (when (loopy (at outer (collect i))
                    (leave))
         (do nil)))
@end lisp
@end table

@findex at
@table @asis
@item @samp{(at LOOP-NAME [CMDS])}
Parse commands with respect to @samp{LOOP-NAME}.  For
example, a @samp{leave} subcommand would exit the loop @samp{LOOP-NAME}, and an
accumulation command would create a variable in that super-loop.

If one did not use @samp{at} in the below example, then the accumulation would
be local to the sub-loop and the macro's return value would be @code{nil}.

@lisp
;; => (4 5 10 11 16 17)
(loopy outer
       (array i [(1 2) (3 4) (5 6)])
       (loopy (with (sum (apply #'+ i)))
              (list j i)
              (at outer (collect (+ sum j)))))
@end lisp

Keep in mind that the effects of flags (@ref{Using Flags}) are local to the loops in
which they are used, even when using the @samp{at} command.

@lisp
;; => ((1 2 11 12)
;;     ((2) (3) (12) (13)))
(loopy outer
       (flag pcase)
       (array elem [(1 2) (11 12)])
       (collect `(,first . ,rest) elem)
       ;; NOTE: The sub-loop uses the default destructuring style.
       ;;       The `pcase' style only affects the surrounding loop.
       (loopy (at outer (collect (first &rest rest) (mapcar #'1+ elem)))
              (leave))
       (finally-return first rest))
@end lisp
@end table

@findex loopy-iter command
@table @asis
@item @samp{(loopy-iter [SPECIAL-MACRO-ARGUMENTS or CMDS or LISP-EXPRS])}
Specifically
wrap a call to the @code{loopy-iter} macro (@ref{The @code{loopy-iter} Macro}).

This feature can only be used after first loading the library @samp{loopy-iter}.

@lisp
(require 'loopy-iter)

;; => '(11 12 13 14 15 16 17 18)
(loopy outer
       (list i '([(1 2) (3 4)]
                 [(5 6) (7 8)]))
       (loopy-iter (arraying j i)
                   (cl-flet ((10+ (x) (+ x 10)))
                     (at outer
                         (appending (mapcar #'10+ j))))))
@end lisp
@end table

@node Destructuring Macros
@chapter Destructuring Macros

@cindex destructuring macros
The below macros make Loopy's built-in destructuring system available for
general use (@ref{Basic Destructuring}).  For example, @code{loopy-let*} can be used for
@code{let}-binding destructured values, similar to @code{pcase-let*}.  Because libraries
like @samp{pcase} and @samp{seq} already provide similar destructuring macros using their
own destructuring systems, these macros are not affected by the flags
that configure the destructuring used by loop commands (@ref{Using Flags}), as that would
be redundant.

To be clear, these destructuring macros can be used outside of the looping
macros.

@lisp
;; => (5 9)
(loopy (flag seq)
       ;; `seq-let'-destructuring used by loop command:
       (list (_ &rest cdr) '((key1 . (2 . 3)) (key2 . (4 . 5))))
       ;; Doesn't use `seq-let'-style destructuring:
       (collect (loopy-let* (((a . b) cdr))
                  (+ a b))))
@end lisp

@findex loopy-let*
@table @asis
@item @code{loopy-let*}
Use destructuring in a @code{let} form, like in @code{pcase-let*} and
@code{seq-let}.

@lisp
;; => (1 2 3 4 5 28)
(loopy-let* ((a 1)
             ([b c] [2 3])
             ((&keys k1 k2 (k3 28)) '(:k1 4 :k2 5)))
  (list a b c k1 k2 k3))
@end lisp
@end table

@findex loopy-setq
@table @asis
@item @code{loopy-setq}
Use destructuring in a @code{setq} form, like in @code{seq-setq} and
@code{pcase-setq}.

@lisp
;; => (1 2 3 4 5 28)
(let (a b c k1 k2 k3)
  (loopy-setq a 1
              [b c] [2 3]
              (&keys k1 k2 (k3 28)) '(:k1 4 :k2 5))
  (list a b c k1 k2 k3))
@end lisp
@end table

@findex loopy-lambda
@table @asis
@item @code{loopy-lambda}
Use destructuring in a @code{lambda}'s argument list, like in
@code{pcase-lambda} and @code{cl-function}.

@lisp
;; => ((1 2 :k1 3) 110)
(funcall (loopy-lambda ((&whole first-arg a b &key k1 (k2 4))
                        second-arg)
           (list first-arg (+ a b k1 k2 second-arg)))
         (list 1 2 :k1 3) 100)
@end lisp
@end table

@findex loopy-ref
@table @asis
@item @code{loopy-ref}
Create destructured references to the fields in a sequence via
@code{cl-symbol-macrolet}.  Do not confuse this with the behavior of @code{cl-letf},
which temporarily binds those places to a value.

This macro uses the destructuring found in the sequence reference iteration
commands (@ref{Sequence Reference Iteration}).  There are some limitations to this
functionality in Emacs Lisp, which are described in that section.

@lisp
;; => ((20 2 23) [24 25 26])
(let ((l1 (list 1 2 3))
      (a1 (vector 4 5 6)))
  (loopy-ref (((a _ b) l1)
              ([c &rest d] a1))
    (setf a 20
          b 23
          c 24
          d [25 26]))
  (list l1 a1))
@end lisp
@end table

@node The @code{loopy-iter} Macro
@chapter The @code{loopy-iter} Macro

@cindex loopy-iter
@findex loopy-iter
@code{loopy-iter} is a macro that allows the embedding of loop commands inside of
arbitrary code.  This is different from the loop command @samp{do}, which allows the
embedding of arbitrary code inside of a @code{loopy} loop.  You must use @code{require} to
load this feature.

This macro is named after the @code{iterate} or @code{iter} macro provided by the Common
Lisp package ``Iterate'' @footnote{@uref{https://common-lisp.net/project/iterate/}} (not to be confused with the @code{iter-*} functions
provided by Emacs).  However, while influenced by @code{iterate}, @code{loopy-iter} is not
a port of @code{iterate} to Emacs Lisp.

@lisp
(require 'loopy-iter) ; <- Must `require' to load feature.

;; => ((1 2 3) (-3 -2 -1) (0))
(loopy-iter (accum-opt positives negatives other)
            (numbering i :from -3 :to 3)
            (pcase i
              ((pred cl-plusp)  (collecting positives i))
              ((pred cl-minusp) (collecting negatives i))
              (_                (collecting other i)))
            (finally-return positives negatives other))

;; => (1 2 3)
(loopy-iter (listing elem '(1 2 3))
            (funcall #'(lambda (x) (collecting x))
                     elem))
@end lisp

The arguments of @code{loopy} are limited to loop commands and special macro
arguments.  @code{loopy-iter} differs by allowing arbitrary Lisp expressions, in
which loop commands are treated as macros to be expanded by @code{macroexpand-all}.
Hence, a loop command could overshadow the function value of a symbol.  There
are two ways to avoid such conflicts.

The first way is to use non-conflicting aliases.  Like in Iterate (and
@code{cl-loop}, to an extent), almost all commands in @code{loopy} have aliases in the
present participle form (the ``-ing'' form).  For example, Loopy provides the
command @samp{list} with the alias @samp{listing}.  Because the command name @samp{list} would
conflict with the built-in Emacs Lisp function @code{list}, only the command name
@samp{listing} is supported by default.  These names of commands and special macro
arguments are called @dfn{bare names} to distinguish them from the second
way of avoiding conflicts.  The complete list of commands and special macro
arguments that are recognized by default is given in the section
@ref{Default Bare Names in @code{loopy-iter}}.

@lisp
;; In `loopy', `list' is unambiguously a command name.
;; => (1 2 3 4)
(loopy (named outer)
       (list i '((1 2) (3 4)))
       (loop (list j i)
             (at outer (collect j))))

;; In `loopy-iter', `list' would be a function.  `listing' is the command.
;; => (1 2 3 4)
(loopy-iter (named outer)
            (listing i '((1 2) (3 4)))
            (loopy-iter (listing j i)
                        ;; Can use `at' instead of `atting':
                        (at outer (collecting j))))
@end lisp

@vindex loopy-iter-bare-commands
The command aliases recognized by @code{loopy-iter} can be customized with the user
option @code{loopy-iter-bare-commands}, which is a list of symbols naming commands
and their aliases.  Again, these commands are found in the loop body using Emacs
Lisp's macro-expansion features, so adding an alias that overrides a symbol's
function definition can cause errors.  @code{loopy}, whose environment is more
limited, does not have this restriction.

@vindex loopy-iter-bare-special-macro-arguments
The special macro arguments (and their aliases) recognized by @code{loopy-iter} can
be set in the user option @code{loopy-iter-bare-special-macro-arguments}.  Some of
their built-in aliases, such as @samp{let*} for @samp{with}, are excluded by default.

@cindex loopy-iter keywords
@vindex loopy-iter-keywords
The first method above deals with looping features that are written like
functions.  If for some reason a suitable alias cannot be used or cannot be
added to one of the above user options, one can write the feature name preceded
by one of the keywords in @code{loopy-iter-keywords}.  This is the second method.

By default, the possible keywords are @samp{for}, @samp{accum}, @samp{exit}, and @samp{arg}.  These
symbols do not share a name with any built-in Emacs feature and are similar to
the keywords used by other packages.  Note that these are not Lisp ``keywords''
that are prefixed with a colon, such as the @samp{:test} in @code{(cl-count ITEM SEQ :test
FUNC)}.  For example,
@itemize
@item
the command @samp{(listing VAR LIST)} could also be written as @samp{(for list VAR
  LIST)}.
@item
the special marco argument @samp{with}, with the alias @samp{let*}, could also be
written as @samp{(arg let* (VAR EXPR) ...)}.  See that this does not conflict with
using the @code{let*} special form.
@end itemize

This method recognizes all commands and their aliases in the user option
@code{loopy-aliases}.

@float Listing,orgd37df25
@lisp
;; => ((1 2 3) (-3 -2 -1) (0))
(loopy-iter (arg accum-opt positives negatives other)
            (for nums i :from -3 :to 3)
            (pcase i
              ((pred cl-plusp)  (accum collect positives i))
              ((pred cl-minusp) (accum collect negatives i))
              (_                (accum collect other i)))
            (arg finally-return positives negatives other))
@end lisp
@caption{The first example, but now using keyword symbols.}
@end float

While the symbols @samp{for}, @samp{accum}, @samp{exit}, and @samp{arg} are named for iteration,
accumulation, early exits, and special macro arguments, respectively, any
keyword in the user option @code{loopy-iter-keywords} can be used to identify any
loop command or special macro argument.  For example, @samp{(accum collect a)} and
@samp{(for collect a)} are both valid ways of referring to the @samp{collect} loop command
in @code{loopy-iter}.  Instead of @samp{(arg let* (a 7))} in the example above, one could
also write @samp{(exit let* (a 7))} if one really wanted to.

Restrictions on the placement of loop commands and special macro arguments
still apply in @code{loopy-iter}.  For example, iteration commands must still occur
at the top level of @code{loopy-iter} or a sub-loop.

@lisp
;; BAD
(loopy-iter (let ((a (progn
                       ;; ERROR: `listing' must occur at the top level.
                       (listing j '(8 9 10 11 12))
                       j)))
              (collecting a)))

;; GOOD
;; => (8 9 10 11 12)
(loopy-iter (let ((a (progn
                       ;; NOTE: No restriction on placement of `setting'.
                       (setting j 8 (1+ j))
                       (when (> j 12) (leaving))
                       j)))
              (collecting a)))
@end lisp

In the macro @code{loopy}, the commands @samp{loopy} and @samp{loopy-iter} are needed to
correctly handle sub-loops.  Those commands are not needed in the macro
@code{loopy-iter}, since the macro expands any macros in its argument while
processing them.

@lisp
;; => (2 3 4 5)
(loopy-iter outer
            (listing i '([1 2] [3 4]))
            ;; NOTE: `loopy-iter' macro, not command
            (loopy-iter (arraying j i)
                        (at outer
                            (let ((val (1+ j)))
                              (collecting val)))))

;; => (2 3 4 5)
(loopy-iter outer
            (listing i '([1 2] [3 4]))
            ;; NOTE: `loopy' macro, not command
            (loopy (array j i)
                   (set val (1+ j))
                   (at outer (collect val))))
@end lisp

Finally, there are a few things to keep in mind when using @code{loopy-iter}:
@enumerate
@item
You should not rely on the value of a loop command's expanded code.  Such
expanded code is an implementation detail and subject to change.
@item
Some macros, especially those that interact with each other, produce broken
code while @code{loopy-iter} is expanding its arguments.  For example,
@code{cl-return-from} is known to be problematic, since it tries to interact with
the correct @code{cl-block}.

Macros that should not be expanded while @code{loopy-iter} expands are listed in
@code{loopy-iter-suppressed-macros}.  Note that this suppression is only in effect
while @code{loopy-iter} expands its loop commands.  Once @code{loopy-iter} outputs its
code, Emacs will attempt to further expand any macros in the outputted code.

Ideally, such problematic macros are infrequent.  Please report such cases on
this project's @uref{https://github.com/okamsn/loopy/issues, issues tracker} so that they can be added to
@code{loopy-iter-suppressed-macros} by default.
@end enumerate

@menu
* Default Bare Names in @code{loopy-iter}::
@end menu

@node Default Bare Names in @code{loopy-iter}
@section Default Bare Names in @code{loopy-iter}

This section lists the default aliases supported as bare names in the macro
@code{loopy-iter}.  The list of supported bare names can be customized in the user
options @code{loopy-iter-bare-commands} and
@code{loopy-iter-bare-special-macro-arguments}.

By default, the following commands are not recognized.
@itemize
@item
@samp{do} and @samp{group}, which are not needed.
@item
Commands that exists only as a command version of an existing Lisp feature,
such as @samp{if}, @samp{cond}, @samp{when}, and @samp{unless}.
@item
The commands @samp{loopy} and @samp{loopy-iter}.  The macro @code{loopy-iter} expands macros
in its arguments, and so can properly handle instances of itself and the macro
@code{loopy} without needing them to be reimplemented as loop commands.
@item
@samp{while}, as it would conflict with the special form @code{while}.
Use @code{(when (not COND) (leaving))} or @code{(unless COND (leaving))} instead.
@item
@samp{until}, to be consistent with the exclusion of @samp{while}.
@end itemize

Using the commands @samp{returning} and @samp{returning-from} are the same as using the
macros @code{cl-return} and @code{cl-return-from}, except that the commands automatically
create a list if enough return values are given.

@lisp
;; => (6 7 8)
(loopy-iter (numbering n :from 0 :to 10)
            (when (> n 5)
              (returning n (1+ n) (+ 2 n))))

;; => (6 7 8)
(loopy-iter (numbering n :from 0 :to 10)
            (when (> n 5)
              (cl-return (list n (1+ n) (+ 2 n)))))
@end lisp

@itemize
@item
Special Macro Argument Names
@itemize
@item
@samp{accum-opt}
@item
@samp{after-do}
@item
@samp{after}
@item
@samp{before-do}
@item
@samp{before}
@item
@samp{else-do}
@item
@samp{else}
@item
@samp{finally-do}
@item
@samp{finally-protect}
@item
@samp{finally-protected}
@item
@samp{finally-return}
@item
@samp{finally}
@item
@samp{flag}
@item
@samp{flags}
@item
@samp{init}
@item
@samp{initially-do}
@item
@samp{initially}
@item
@samp{no-init}
@item
@samp{no-with}
@item
@samp{opt-accum}
@item
@samp{with}
@item
@samp{without}
@item
@samp{wrap}
@end itemize
@item
Command Names
@itemize
@item
Iteration Command Names
@itemize
@item
Generic Iteration Command Names
@itemize
@item
@samp{cycling}
@item
@samp{repeating}
@end itemize
@item
Numeric Iteration Command Names
@itemize
@item
@samp{numbering}
@item
@samp{numbering-down}
@item
@samp{numbering-up}
@end itemize
@item
Sequence Iteration Command Names
@itemize
@item
@samp{arraying}
@item
@samp{consing}
@item
@samp{listing}
@item
@samp{mapping-pairs}
@item
@samp{mapping}
@item
@samp{seqing}
@item
@samp{sequencing}
@item
@samp{stringing}
@end itemize
@item
Sequence Index Iteration Command Names
@itemize
@item
@samp{arraying-index}
@item
@samp{listing-index}
@item
@samp{sequencing-index}
@item
@samp{stringing-index}
@end itemize
@item
Sequence Reference Iteration Command Names
@itemize
@item
@samp{arraying-ref}
@item
@samp{listing-ref}
@item
@samp{mapping-ref}
@item
@samp{sequencing-ref}
@item
@samp{stringing-ref}
@end itemize
@end itemize
@item
Accumulation Commands
@itemize
@item
@samp{accumulating}
@item
@samp{adjoining}
@item
@samp{appending}
@item
@samp{collecting}
@item
@samp{concating}
@item
@samp{counting}
@item
@samp{finding}
@item
@samp{maximizing}
@item
@samp{minimizing}
@item
@samp{multiplying}
@item
@samp{nconcing}
@item
@samp{nunioning}
@item
@samp{prepending}
@item
@samp{pushing}
@item
@samp{pushing-into}
@item
@samp{reducing}
@item
@samp{summing}
@item
@samp{unioning}
@item
@samp{vconcating}
@end itemize
@item
Boolean Commands
@itemize
@item
@samp{always}
@item
@samp{never}
@item
@samp{thereis}
@end itemize
@item
Cycle-Skipping Commands
@itemize
@item
@samp{continuing}
@item
@samp{continuing-from}
@item
@samp{skipping}
@item
@samp{skipping-from}
@end itemize
@item
Early-Exit Commands
@itemize
@item
@samp{leaving}
@item
@samp{leaving-from}
@item
@samp{returning}
@item
@samp{returning-from}
@end itemize
@item
Sub-loop Commands
@itemize
@item
@samp{at}
@end itemize
@end itemize
@end itemize

@node Using Flags
@chapter Using Flags

@cindex flag
A @dfn{flag} is a symbol passed to the @samp{flag} or @samp{flags} special macro
argument, changing the macro's behavior.  Currently, flags affect what method
@code{loopy} uses to perform destructuring (@samp{pcase}, @samp{seq}, @samp{dash}, or the default)
and whether accumulation commands that don't specify a variable (such as
@samp{(collect collect-value)}) accumulate into one or several variables.

Flags are applied in order.  If you specify @samp{(flags seq pcase)}, then @code{loopy}
will use @code{pcase-let} for destructuring, not @code{seq-let}.

@vindex loopy-default-flags
If you wish to always use a flag, you can add that flag to the list
@code{loopy-default-flags}.  These can be overridden by any flag given in the @samp{flag}
special macro argument.

The following flags are currently supported:

@cindex pcase flag
@table @asis
@item @samp{pcase}
Use @code{pcase-let} for destructuring
(@ref{Destructuring with pcase Patterns,,,elisp,}).
@end table
@cindex seq flag
@table @asis
@item @samp{seq}
Use @code{seq-let} for destructuring (@ref{seq-let,,,elisp,}).
@end table
@cindex dash flag
@table @asis
@item @samp{dash}
Use the style of destructuring found in the @samp{dash} library
(@ref{-let,,,dash,}).
@end table
@cindex default flag
@table @asis
@item @samp{default}
Use the default behavior for all options.
@end table


For convenience, all flags (except @samp{default}) can be undone by prefixing them
with @samp{-} (a dash or minus sign), which reverts @code{loopy} to its default behavior.

For example, if you have set @code{loopy-default-flags} to @samp{(dash)} and wish to use
the default destructuring method, you can use @samp{(flags default)} or @samp{(flags
-dash)}.  These prefixed flags only apply when the unprefixed version is active.
That is, @samp{(flags pcase -dash)} is the same as just @samp{(flags pcase)}, regardless
of the value of @code{loopy-default-flags}, as @samp{pcase} destructuring will override
all uses of @samp{dash} destructuring as it comes later in the list.  Similarly,
@samp{(flags -dash dash)} and @samp{(flags -dash +dash)} leave @samp{dash} destructuring
enabled, and @samp{(flags +dash -dash)} disables @samp{dash} destructuring and uses the
default behavior.

@cindex loopy-dash
@cindex loopy-pcase
@cindex loopy-seq
The destructuring flags (@samp{pcase}, @samp{seq}, and @samp{dash}) are separate libraries
(respectively, @samp{loopy-pcase}, @samp{loopy-seq}, and @samp{loopy-dash}) that must be
loaded after @samp{loopy}.  Currently, @samp{loopy-dash} is a separate package.

Below are some example of using the destructuring flags.  These flags affect
the destructuring of:
@itemize
@item
iteration variables
@item
accumulation variables
@item
variables bound by the special macro argument @samp{with}
@end itemize

@quotation Note
These flags do not affect the destructuring of generalized variables
(@code{setf}-able places) as the libraries @samp{pcase.el}, @samp{seq.el}, and @samp{dash.el} do not
yet provide the required functionality.

@end quotation

@lisp
;; => ((1 4)            coll1
;;     ((2 3) (5 6))    whole
;;     (2 5)            x
;;     (3 6))           y
(require 'loopy-dash)
(loopy (flag dash)
       (list (i j) '((1 (2 3)) (4 (5 6))))
       (collect coll1 i)
       (collect (whole &as x y) j)
       (finally-return coll1 whole x y))

;; => ((1 4) (3 6) 10 20 nil nil)
(require 'loopy-pcase)
(loopy (flag pcase)
       (with ((or `[,v1 ,v2] `(,v3 ,v4))
              [10 20]))
       (list elem '((1 (2 3)) (4 (5 6))))
       (collect `(,a (,_ ,b)) elem)
       (finally-return a b v1 v2 v3 v4))

;; => (14 26)
(require 'loopy-seq)
(loopy (flag seq)
       (with ([v1 v2] [10 20]))
       (list (i &rest j) '((1 . 2) (3 . 4)))
       (sum sum1 i)
       (sum sum2 j)
       (finally-return (+ sum1 v1) (+ sum2 v2)))
@end lisp

@node Custom Aliases
@chapter Custom Aliases

@cindex custom aliases
An @dfn{alias} is another name for a command or special macro argument.
@code{loopy} comes with several built-in aliases, such as @samp{string} for the command
@samp{array} or @samp{else} for the special macro argument @samp{after-do}.

@multitable {aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa} {aaaaaaaaaaaaaaaaaaaaaaaaaa}
@headitem Command or Special Macro Argument
@tab Built-In Aliases
@item @samp{array}
@tab @samp{string}
@item @samp{seq-ref}
@tab @samp{sequence-ref}, @samp{seqf}
@item @samp{after-do}
@tab @samp{after}, @samp{else}, @samp{else-do}
@end multitable


An alias works the same as the original command or special macro argument.
They are provided for clarity and convenience.

@lisp
;; => ("a" "b" "c" "d")
(loopy (array i "abcd")
       (collect (char-to-string i)))

;; => ("a" "b" "c" "d")
(loopy (string i "abcd")
       (collect (char-to-string i)))
@end lisp

@findex loopy-defalias
Users can define custom aliases using the macro @code{loopy-defalias}, which takes an
alias and a definition as arguments.  These arguments can be quoted or unquoted.

@lisp
(loopy-defalias items array)

;; => (1 2 3)
(loopy (items i [1 2 3])
       (collect i))
@end lisp

The definition must exist for the alias to be defined correctly.  Definitions
can themselves be aliases, so long as they are already defined.  In other words,
when aliasing custom commands, you should define the alias @emph{after} defining the
command (@ref{Custom Commands}).

@lisp
;; Define an alias for the `items' alias from above:
(loopy-defalias items2 items)

;; => (1 2 3)
(loopy (items2 i [1 2 3])
       (collect i))
@end lisp

When looking for how to parse a command, @code{loopy} will check aliases before
checking the true names of commands.  Effectively, this means that commands can
be overridden by aliases, though this is discouraged.  Such commands can still
be accessed via their other names.

@lisp
;; Define `cons' as an alias of `array':
(loopy-defalias cons array)

;; => (1 2 3)
(loopy (cons i [1 2 3])
       (collect i))

;; ERROR: Can no longer use the original definition:
(loopy (cons i '(1 2 3))
       (collect i))

;; Other names still work:
;; => ((1 2 3) (2 3) (3))
(loopy (conses i '(1 2 3))
       (collect i))
@end lisp

Special macro arguments (@ref{Special Macro Arguments}) can also be aliased.  Using an
alias does not change the fact that the special macro arguments are parsed
before loop commands.

@lisp
(loopy-defalias as with)

;; => (8 9 10)
(loopy (as (a 7))
       (list i '(1 2 3))
       (collect (+ i 7)))
@end lisp

@vindex loopy-aliases
The macro @code{loopy-defalias} modifies the user option @code{loopy-aliases}.  However,
while @code{loopy} is still changing, it is recommended to avoid modifying this
variable directly, as its structure may change in the future.  @code{loopy-defalias}
is the forward-compatible way of creating aliases.

@node Custom Commands
@chapter Custom Commands

This section contains information about how loop commands work and how one can
add custom commands to @code{loopy}.  Two examples are provided.

@menu
* Background Info::              The internals of `loopy'.
* Hello World::                  A minimal working example.
* An @code{always} Command::     Adding a feature from `cl-loop'.
* Custom commands in the @code{loopy-iter} macro::
* Finding More Examples::
@end menu

@node Background Info
@section Background Info

@cindex instruction, instructions
The core working of @code{loopy} is taking a loop command and generating code that
becomes part of a @code{while}-loop.  This code is represented by
@dfn{instructions}, which basically describe where and how code is inserted
into and around a template of a @code{while}-loop.

Some examples of instructions are:
@itemize
@item
Declaring a given variable in a @code{let}-like form to make sure it's locally
scoped.
@item
Declaring a generated variable in a @code{let}-like form to contain a given value.
@item
Adding a condition for continuing/exiting the loop.
@item
Adding code to be run during the main processing section of the @code{while}-loop.
This location is referred to as the @dfn{main body} of the loop.
@item
Adding code to be run after the main processing section, such as for updating
variables.  This location is referred to as the @dfn{latter body} of the
loop.
@end itemize

For example, parsing the command @samp{(list i '(1 2 3))} produces the following list
of instructions.  Some commands require the creation of unique temporary
variables, such as @samp{list-211} in the below output.

@lisp
((loopy--iteration-vars (list-211 '(1 2 3)))
 (loopy--iteration-vars (i nil))
 (loopy--pre-conditions (consp list-211))
 (loopy--main-body      (setq i (car list-211)))
 (loopy--latter-body    (setq list-211 (cdr list-211))))
@end lisp

The first element of an instruction describes where to insert code into the
template.  The second element of an instruction is the inserted code.  You can
see that not all of the code to be inserted is a valid Lisp form.  For example,
the above instruction referencing @code{loopy--iteration-vars} inserts a binding for
the variable @samp{list-211} into a @code{let}-like form.

@multitable {aaaaaaaaaaaaaaaaaaaaaaa} {aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa}
@headitem Place
@tab Code
@item @samp{loopy--iteration-vars}
@tab @samp{(list-211 '(1 2 3))}
@item @samp{loopy--latter-body}
@tab @samp{(setq list-211 (cdr list-211))}
@item @samp{loopy--pre-conditions}
@tab @samp{(consp list-211)}
@item @samp{loopy--iteration-vars}
@tab @samp{(i nil)}
@item @samp{loopy--main-body}
@tab @samp{(setq i (car list-211)))}
@end multitable

@cindex instruction order
Instructions are applied in order in such a way that earlier instructions are
not overridden by later instructions.  For example, if the special macro
argument @samp{with} sets a variable's value, that value will not be overridden by
commands which might try to initialize that variable to @code{nil}.  This works
because special macro arguments are always parsed before loop commands.

@findex loopy--parse-loop-command
@findex loopy--parse-loop-commands
Commands are parsed by @code{loopy--parse-loop-command}, which receives a command
call, such as @samp{(list i '(1 2 3))}, and returns a list of instructions.  It does
this by searching for an appropriate command-specific parsing function in
@code{loopy-aliases} and ultimately in @code{loopy-command-parsers}.  For parsing multiple
commands in order, there is @code{loopy--parse-loop-commands}, which wraps the
single-command version.

For example, consider the function @code{loopy--parse-if-command}, which parses the
@samp{if} loop command.  It needs to check the instructions of the sub-commands
passed to @samp{if}, looking for code that would be inserted into the main loop body
(as determined by the first element of the instruction).  Once found, it wraps
that code with an @code{if}-form.

@lisp
;; => ((loopy--iteration-vars (i nil))
;;     (loopy--main-body (setq i 1)))
(loopy--parse-loop-command '(set i 1))

;; => ((loopy--iteration-vars (i nil))
;;     (loopy--main-body (if (my-condition)
;;                           (setq i 1)
;;                         (setq i 2))))
(loopy--parse-if-command '(if (my-condition)
                              (set i 1)
                            (set i 2)))
@end lisp

For the purpose of this example, below is a version of the parsing function made
of the basic Lisp features with which you are familiar.  The actual definition
makes use of more convenient Emacs Lisp libraries and can be seen in the library
@file{loopy-commands.el}.

@lisp
(require 'loopy-commands)
(defun loopy--parse-if-command (arg)
  "Parse the `if' loop command usage ARG.
ARG is of the form (if CONDITION IF-TRUE &rest IF-FALSE)."

  (let ((condition (cadr arg))   ; Second element of `arg'.
        (if-true   (caddr arg))  ; Third element of `arg'.
        (if-false  (cdddr arg))) ; Remaining elements of `arg'.

    ;; The main processing of this function is to separate instructions
    ;; for the loop's main body from other instructions,
    ;; and to then wrap those main-body instructions with an
    ;; `if' special form.
    (let ((full-instructions)
          (if-true-main-body)
          (if-false-main-body)
          ;; This variable is just so that iteration commands know when
          ;; they are being used away from the top level of the loop's
          ;; structure (which is an error).
          (loopy--in-sub-level t))

      ;; Process the instructions for the command that should run if the
      ;; condition is true.
      (dolist (instruction (loopy--parse-loop-command if-true))
        (if (eq 'loopy--main-body (car instruction))
            (push (cadr instruction) if-true-main-body)
          (push instruction full-instructions)))

      ;; Process the instructions for the commands that should run
      ;; if the condition is false.
      (dolist (instruction (loopy--parse-loop-commands if-false))
        (if (eq 'loopy--main-body (car instruction))
            (push (cadr instruction) if-false-main-body)
          (push instruction full-instructions)))

      ;; Note: `push' adds elements to the front of a list,
      ;;       so we need to reverse these lists before returning
      ;;       the new list of instructions.

      ;; `loopy--parse-loop-command' always returns a list of instructions.
      ;; For some commands, that means wrapping multiple instructions in
      ;; a `progn' form.  For others, we need to extract the only element.
      (setq if-true-main-body
            (if (= 1 (length if-true-main-body))
                (car if-true-main-body)
              (cons 'progn (nreverse if-true-main-body))))

      ;; Return the new, full list of instructions.
      (cons `(loopy--main-body
              . (if ,condition
                    ,if-true-main-body
                  ,@@(nreverse if-false-main-body)))
            (nreverse full-instructions)))))
@end lisp

The hardest part of this exchange is making sure that the inserted code ends up
in the correct order.

A loop command has 7 main places to put code:

@vindex loopy--generalized-vars
@table @asis
@item @samp{loopy--generalized-vars}
Lists of a symbol and a macro expansion that will
be given to @samp{cl-symbol-macrolet}.  This is used to create named @code{setf}-able
places.  The expansion you use depends on the kind of sequence and how the it
is updated.

For example, @samp{(list-ref i my-list)} declares @samp{i} to be a symbol which expands
to @samp{(car TEMP-VAR)}, in which @samp{TEMP-VAR} holds the value of @samp{my-list}.  At the
end of the loop body, @samp{TEMP-VAR} is set to its @samp{cdr}, ensuring that the next
call to @samp{car} returns the correct value.
@end table

@vindex loopy--iteration-vars
@table @asis
@item @samp{loopy--iteration-vars}
Lists of a symbol and an expression that will be
given to @code{let*}.  This is used for initializing variables needed for iteration
commands, such as the @samp{i} in @samp{(list i '(1 2 3))} or to store the list @samp{'(1 2
  3)} in @samp{(list i '(1 2 3))}.  This also includes variables needed for
destructuring for said commands.

@samp{loopy} will signal an error if iteration variables would be initialized
multiple times, as that would arise from expanding into incorrect code which
would fail during runtime.
@end table

@vindex loopy--accumulation-vars
@table @asis
@item @samp{loopy--accumulation-vars}
Lists of a symbol and an expression that will be
given to @code{let*}.  This is used for initializing variables needed for
accumulation commands, such as the @samp{coll} in @samp{(collect coll my-val)} or any
variables needed for destructuring for said commands.
@end table

@vindex loopy--other-vars
@table @asis
@item @samp{loopy--other-vars}
Lists of a symbol and an expression that will be
given to @code{let*}.  This is used for initializing variables needed for
generic commands, such as the @samp{my-var} in @samp{(set my-var 2)} or any
variables needed for destructuring for said command.
@end table

@vindex loopy--pre-conditions
@table @asis
@item @samp{loopy--pre-conditions}
Expressions that determine if the @samp{while} loop
runs/continues, such as whether a list still has elements in it.  If there is
more than one expression, than all expressions are used in an @samp{and} special
form.
@end table

@vindex loopy--main-body
@table @asis
@item @samp{loopy--main-body}
Expressions that make up the main body of the loop.
@end table

@vindex loopy--latter-body
@table @asis
@item @samp{loopy--latter-body}
Expressions that need to be run after the main body,
such as updating some of variables that determine when a loop ends.
@end table

@vindex loopy--post-conditions
@table @asis
@item @samp{loopy--post-conditions}
Expressions that determine whether the @samp{while}
loop continues, but checked after the loop body has run.  The code from this
is ultimately appended to the latter body before being substituted in.
@end table

For accumulation commands, you might also wish to place values in the following:

@vindex loopy--implicit-return
@table @asis
@item @samp{loopy--implicit-return}
A list of values to be returned by the loop if no
other return value is specified/reached.  A value is added to this list when
an accumulation command does not specify an accumulation variable, and in some
special other cases.

By default, the implicit return value is @code{loopy-result}, and so this variable
is usually just a list of the symbol @samp{loopy-result}.
@end table

@vindex loopy--vars-final-updates
@table @asis
@item @samp{loopy--vars-final-updates}
Actions to perform on the variable (usually an
accumulation variable) after the loop ends.  Some implied accumulation
commands need to update the variable one final time after ending the loop.
Some examples are:
@enumerate
@item
Correcting the order of elements in a list that was constructed in reverse.
@item
Coercing the variable into a new sequence type, for commands with the
@code{:result-type} argument.
@end enumerate

Each accumulation variable can only be updated once, in a single way.  For
example, a variable cannot be reversed according to the needs of one command
and then coerced into a new type according to the needs of another.  Commands
acting on the same accumulation variable must require the same final update,
including if they require no final update.  For example, a command that uses
@samp{:result-type} to coerce @code{loopy-result} into a vector is incompatible with a
command that does not require (and so does not expect) a final update.
@end table


Loopy will attempt to produce efficient code, and will not attempt to set up
features which are not used.  Therefore, the expanded code depends on the kinds
of instructions that are returned by the parsing functions.  For the most part,
the instructions affect the expansion of the loop that contains their respective
command.  However, there are cases where a command must send instructions to a
surrounding loop, not just the loop which immediately contains it.  Consider
using an accumulation command within the @samp{at} command, as in the below example.
The accumulation variable must be declared for the loop @samp{outer}, but the
accumulation itself must still occur within the loop @samp{inner}.

@lisp
;; => (1 2 3 4)
(loopy (named outer)
       (array i [(1 2) (3 4)])
       (sub-loop inner
                 (list j i)
                 (at outer (collect coll j)))
       (finally-return coll))
@end lisp

To communicate these instructions, use @code{loopy--at-instructions}.  For example,
the output of parsing @samp{(at outer (collect j :at start))} would be a list of
instructions similar to those below.  While all of these sub-instructions are
produced by parsing the @samp{collect} command, not all are sent to the loop @samp{outer}.

@lisp
((loopy--at-instructions
  (outer (loopy--accumulation-vars (loopy-result nil))
         (loopy--implicit-return loopy-result)))
 (loopy--main-body (setq loopy-result (cons j loopy-result))))
@end lisp

@vindex loopy--at-instructions
@table @asis
@item @samp{loopy--at-instructions}
Instructions that should be interpreted by a
surrounding loop.  For example, this kind of instruction is used by the @samp{at},
@samp{skip-from}, and @samp{leave-from} commands.  The instruction's value is a list of
a loop name followed by sub-instructions.

This variable works as a something like a combination of a stack and a map.
This means that then when multiple surrounding loops share the same name, the
instructions affect the innermost surrounding loop of that name.
@end table


There are 4 more variables a loop command can push to, but they are derived from
the macro's arguments.  Adding to them after using a macro argument might lead
to unintended behavior.  You might wish to use them if, for example, you are
concerned with what happens after the loop exits/completes.

@vindex loopy--before-do
@table @asis
@item @samp{loopy--before-do}
Expressions to evaluate before the loop.  These are
derived from the @samp{before-do} macro argument.
@end table

@vindex loopy--after-do
@table @asis
@item @samp{loopy--after-do}
Expressions to evaluate after the loop completes
successfully.  These are derived from the @samp{after-do} macro argument.
@end table

@vindex loopy--final-do
@table @asis
@item @samp{loopy--final-do}
Expressions to evaluate after the loop completes,
regardless of success.  These are derived from the @samp{finally-do} macro
argument.
@end table

@vindex loopy--final-return
@table @asis
@item @samp{loopy--final-return}
An expression that is always returned by the macro,
regardless of any early returns in the loop body.  This is derived from the
@samp{finally-return} macro argument.
@end table


@vindex loopy--loop-name
Some commands might depend on the name of the loop.  The symbol which names the
loop is stored in the variable @code{loopy--loop-name}.  The default name is @code{nil}.

The structure of the macroâ€™s expanded code depends on the features used (for
example, @code{loopy} wonâ€™t try to declare variables if none exist), but the result
will work similar to the below example.

@lisp
`(cl-symbol-macrolet ,loopy--generalized-vars
   (let* ,loopy--with-vars
     (let ,loopy--accumulation-vars
       (let* ,loopy--iteration-vars
         (let ((loopy--early-return-capture
                (cl-block ,loopy--loop-name
                  ,@@loopy--before-do
                  (catch loopy--non-returning-exit-tag-name
                    (while ,(cl-case (length loopy--pre-conditions)
                              (0 t)
                              (1 (car loopy--pre-conditions))
                              (t (cons 'and loopy--pre-conditions)))
                      (catch loopy--skip-tag-name
                        ,@@loopy--main-body)
                      ,@@loopy--latter-body
                      (unless ,loopy--post-conditions
                        (cl-return-from ,loopy--loop-name
                          ,loopy--implicit-return)))
                    ,loopy--vars-final-updates
                    ,@@loopy--after-do))
                ,loopy--implicit-return))
           ,@@loopy--final-do
           ,(if loopy--final-return
                loopy--final-return
              'loopy--early-return-capture))))))
@end lisp

@node Hello World
@section Hello World

To implement a custom loop body command, @samp{loopy} needs two pieces of
information:
@enumerate
@item
The keyword that names your command
@item
The parsing function that can turn uses of your command into instructions.
@end enumerate

Importantly, your custom commands cannot share a name.

For example, say that you're tired of typing out @samp{(do (message "Hello, %s %s"
PERSONAL-NAME FAMILY-NAME))} and would prefer to instead use @samp{(greet
PERSONAL-NAME [FAMILY-NAME])}.  This only requires adding code to the loop's
main body, so the definition of the parsing function is quite simple.

@lisp
(require 'cl-lib)
(cl-defun my-loopy-greet-command-parser
    ((_ personal-name &optional family-name))
  "Greet one with PERSONAL-NAME and optional FAMILY-NAME."
  `((loopy--main-body
     (if ,family-name
         (message "Hello, %s %s" ,personal-name ,family-name)
       (message "Hello, %s" ,personal-name)))))
@end lisp

@samp{loopy} will pass the entire command expression to the parsing function, and
expects that a list of instructions will be returned.

@vindex loopy-command-parsers
To tell @samp{loopy} about this function, add it and the command name @samp{greet} to the
variable @code{loopy-command-parsers}, which associates commands with parsing
functions.  The function that is paired with the symbol receives the entire
command expression, and should produce a list of valid instructions.

@lisp
;; Using the Map library, for convenience.
(require 'map)
(setf (map-elt loopy-command-parsers 'greet)
      #'my-loopy-greet-command-parser)
@end lisp

After that, you can use your custom command in the loop body.

@lisp
(loopy (list name '(("John" "Deer") ("Jane" "Doe") ("Jimmy")))
       (greet (car name) (cadr name)))
@end lisp

By running @kbd{M-x pp-macroexpand-last-sexp RET} on the above expression,
you can see that it expands to do what we want, as expected.  You might notice
that one shortcoming of the current definition is that if a function is used to
produce the second argument, as in @code{(greet (personal-name) (family-name))}, then
that function is called twice.  This occurs with @code{(cadr name)} in the below
output, and can cause problems when using stateful functions.  This particular
case can be resolved by using the macro @code{if-let} to first store the result of
@code{(cadr name)}, and is something to keep in mind when defining Lisp macro
expansions in general.

@lisp
;; An example expansion.
(let* ((list-166 '(("John" "Deer") ("Jane" "Doe") ("Jimmy")))
       (name nil))
  (cl-block nil
    (while (consp list-166)
      (setq name (car list-166))
      (if (cadr name)
          (message "Hello, %s %s"
                   (car name)
                   (cadr name))
        (message "Hello, %s"
                 (car name)))
      (setq list-166 (cdr list-166)))
    nil))
@end lisp

@node An @code{always} Command
@section An @code{always} Command

Lets say we want to emulate @code{cl-loop}'s @samp{always} clause, which causes the loop
to return @code{nil} if an expression evaluates to @code{nil} and @code{t} otherwise.  This is
similar to the functions @code{cl-every} and @code{seq-every-p}.

Here is an example:

@lisp
;; => t
(cl-loop for i from 1 to 9 always (< i 10))
@end lisp

While @code{loopy} already has an @samp{always} command, we'll ignore it for the sake of
this example.  Without a custom command, you could translate this using the
following code:

@lisp
;; => t
(loopy (numbers i :from 1 :to 9)
       (unless (< i 10) (return nil))
       (else-do (cl-return t)))
@end lisp

This is similar to what you might write in other languages, such as Python.

@example
# In some testing Python function:
for i in range(1, 10):
    if not (i < 10):
        return False
else:
    return True
@end example

While the meaning of the code is clear, this approach is certainly wordier.

Here's how one could do this using a custom command.  Again, @samp{loopy} already
comes with a built-in @samp{always} command.  This example is taken directly from the
file @file{loopy-commands.el}, which contains the code of all of @code{loopy}'s
built-in parsers.

We can describe the command's desired behavior in two sentences:
@enumerate
@item
The loop should immediately return @code{nil} if the expression ever evaluates to
@code{nil}.
@item
The loop should return @code{t} if the loop is able to complete successfully.
@end enumerate

This simplest way to satisfy the first requirement is to conditionally use
@code{cl-return} if the expressions ever evaluates to @code{nil}.  We want to do this
while the loop is running, so we should use an instruction for
@code{loopy--main-body}.

@lisp
;; We want to insert the below code into the loop
(unless CONDITION
  (cl-return nil))

;; so we use the instruction
`(loopy--main-body (unless ,CONDITION (cl-return nil)))

;; where CONDITION is supplied by the parsing function.
@end lisp

For a simple loop, this works well enough.  However, the function @code{cl-return}
only works with blocks that are named @code{nil}.  If we have named the loop, then
@code{cl-return} won't work, and might instead cause unexpected errors.  Therefore,
it is better to use @code{cl-return-from} with the variable @code{loopy--loop-name}.  As
noted in the previous section, @code{loopy--loop-name} stores the symbol which names
the loop.

@lisp
`(loopy--main-body (unless ,CONDITION
                     (cl-return-from ,loopy--loop-name nil)))
@end lisp

The best way to satisfy the second requirement is to use an instruction for
@code{loopy--implicit-return}.  One @emph{could} try to insert code using @code{cl-return-from}
into @code{loopy--after-do}, and this @emph{would} cause a value to be returned after the
loop had successfully completed, but doing it that way could unexpectedly
prevent other code in @samp{after-do} from running.  Using an implicit return value
does not have that problem.

This gives us the following instruction, which will add @code{t} to the list of
values the macro returns if nothing else would be returned.  If that list is
just @code{'(t)}, then the macro knows to just return @code{t}.

@lisp
'(loopy--implicit-return t)
@end lisp

Once we've chosen our instructions, we need to tell @samp{loopy} what function to use
to produce these instructions.  Like in the previous example, we define the
parsing function and add it to @code{loopy-command-parsers}.

@lisp
;; As noted in the previous section, the parsing function is always
;; passed the entire command as `(always CONDTION)', not just the
;; command arguments as `CONDITION'.

(cl-defun my--loopy-always-command-parser ((_ condition))
  "Parse a command of the form `(always CONDITION)'.

If any condition is nil, `loopy' should immediately return nil.
Otherwise, `loopy' should return t."
  `((loopy--implicit-return t)
    (loopy--main-body (unless ,condition
                        (cl-return-from ,loopy--loop-name nil)))))

(setf (map-elt loopy-command-parsers 'always)
      #'my--loopy-always-command-parser)
@end lisp

Once we've added our parsing function to @code{loopy-command-parsers}, @samp{loopy} will
use that function whenever it tries to understand the @samp{always} command.  In this
case, this custom parser would supercede the built-in parser.

With that done, our custom @samp{always} command is as useful as the corresponding
@code{cl-loop} clause.  However, because @code{loopy} uses expressions instead of keyword
clauses like @code{cl-loop}, we can do slightly better.  For convenience, we can
easily allow passing multiple conditions to the command instead of just one.  In
such cases, the conditions should be wrapped in an @code{and} form, and that is
indeed what the built-in parser does.

@lisp
;; The built-in parser, taken from `loopy-commands.el':
(cl-defun loopy--parse-always-command ((_ &rest conditions))
  "Parse a command of the form `(always [CONDITIONS])'.

If any condition is nil, `loopy' should immediately return nil.
Otherwise, `loopy' should return t."
  `((loopy--implicit-return t)
    ;; If there are multiple conditions, wrap these conditions in `and'.
    (loopy--main-body (unless ,(if (= 1 (length conditions))
                                   (cl-first conditions)
                                 `(and ,@@conditions))
                        (cl-return-from ,loopy--loop-name nil)))))
@end lisp

Here are some examples of the command in action:

@lisp
;; One condition: => t
(loopy (list i (number-sequence 1 9)) (always (< i 10)))

;; Two conditions: => nil
(loopy (list i (number-sequence 1 9))
       (list j '(2 4 6 8 9))
       (always (< i 10) (cl-evenp j)))

;; The previous example is equivalent to this.
(loopy (list i (number-sequence 1 9))
       (list j '(2 4 6 8 9))
       (always (and (< i 10) (cl-evenp j))))
@end lisp

@node Custom commands in the @code{loopy-iter} macro
@section Custom commands in the @code{loopy-iter} macro

See also @ref{The @code{loopy-iter} Macro}.

@code{loopy-iter} works by:
@enumerate
@item
separating main-body instructions from other instructions
@item
expanding that main-body code for @code{loopy} sub-commands
@item
collected those expansions into the outputted loop's body
@item
processing the collected non-main-body instructions
@end enumerate

Most loop commands should work with @code{loopy-iter} without any changes.  Some loop
commands are just @code{loopy} versions of built-in Lisp macros or special forms, and
so aren't needed in @code{loopy-iter} in the first place.

However, special consideration is needed for commands that produce main-body
code outside of main-body instructions, or that assume all of their arguments
are loop commands.  Consider the parser for the @samp{at} command:

@lisp
(cl-defun loopy--parse-at-command ((_ target-loop &rest commands))
  "Parse the `at' command as (at &rest COMMANDS).

These commands affect other loops higher up in the call list."
  (loopy--check-target-loop-name target-loop)
  (let ((loopy--loop-name target-loop)
        (loopy--in-sub-level t))
    `((loopy--at-instructions
       (,target-loop
        ,@@(loopy--parse-loop-commands commands))))))
@end lisp

All it does is process its arguments and wrap the resulting instructions in an
@samp{at} instruction.  By wrapping main-body instructions in an @samp{at} instruction,
@code{loopy-iter} does not see the main-body code, and so cannot use it.  Instead, an
alternative parser must be use:

@lisp
  (cl-defun loopy-iter--parse-at-command ((_ target-loop &rest commands))
  "Parse the `at' command as (at &rest COMMANDS).

These commands affect other loops higher up in the call list."
  (loopy--check-target-loop-name target-loop)
  ;; We need to capture all non-main-body instructions into a new `at'
  ;; instruction, so we just temporarily `let'-bind
  ;; `loopy-iter--non-main-body-instructions' while expanders push to it,
  ;; we which then wrap back in a new instruction and pass up to the calling
  ;; function, which consumes instructions.
  (loopy (with (loopy-iter--non-main-body-instructions nil)
               (loopy--loop-name target-loop)
               (loopy--in-sub-level t))
         (list cmd commands)
         (collect (list 'loopy--main-body (loopy-iter--macroexpand-sub cmd)))
         (finally-return
          ;; Return list of instructions to comply with expectations of calling
          ;; function, which thinks that this is a normal loop-command parser.
          `(,@@loopy-result
            (loopy--at-instructions
             (,target-loop
              ,@@(thread-last loopy-iter--non-main-body-instructions
                             nreverse
                             (apply #'append))))))))
@end lisp

@vindex loopy-iter--non-main-body-instructions
This @code{loopy-iter}-specific definition separates the main-body instructions out
from the other instructions so that @code{loopy-iter} can operate on their values
directly.  The variable @code{loopy-iter--non-main-body-instructions} is a place
where the macro-expanding parsers used by @code{loopy-iter} can push lists of
instructions (see the code for usage examples).

@vindex loopy-iter-overwritten-command-parsers
These alternative command parsers are listed in
@code{loopy-iter-overwritten-command-parsers}.

@node Finding More Examples
@section Finding More Examples

If you would like to see more examples, consider reading through the source code
of @file{loopy-commands.el}, which contains the code of all of the built-in
loop commands.  You can easily find this file using @kbd{M-x find-library loopy-commands RET}.

@node Comparing to @code{cl-loop}
@chapter Comparing to @code{cl-loop}

@code{loopy} is a better version of @code{cl-loop}, judging by the following:
@itemize
@item
It as fast or faster than @code{cl-loop}, though some optimizations are more
explicit.

@item
Loop commands are always evaluated in order.

@item
@code{loopy} provides a more complete destructuring system, which can be swapped out
with others.

@lisp
;; No array destructuring in `cl-loop'.
;; => (3 7)
(loopy (list [i j] '([1 2] [3 4]))
       (collect (+ i j)))
@end lisp

@item
@code{loopy} provides more looping constructs out of the box with a (according to
the author) clearer naming scheme than @code{cl-loop}'s @samp{for} clauses.

@lisp
(loopy (list i my-var1)
       (array j my-var2)
       (collect (cons i j)))

(cl-loop for i in my-var1
         for j across my-var2
         collect (cons i j))
@end lisp

@item
Taking influence from CL's Iterate, several @code{loopy} commands are more
featureful than their @code{cl-loop} counterparts.

@lisp
;; `array' is more featureful than `for-across'.
;; => ((9 . 20) (7 . 18) (5 . 16) (3 . 14) (1 . 12))
(loopy (array i [11 12 13 14 15 16 17 18 19 20]
              :downfrom 9 :by 2 :to 1 :index idx)
       (collect (cons idx i)))
@end lisp

@item
@code{loopy} provides more control over what happens after and around the loop.
@code{cl-loop} lacks equivalents of the following special macro arguments:
@itemize
@item
@samp{after-do}: There is only a @code{finally do}.
@item
@samp{without}: There is no way to prevent @code{cl-loop} from binding variables.
@item
@samp{finally-protect}: Though niche, @code{loopy} can wrap only the loop body in
@code{unwind-protect}.
@item
@samp{accum-opt}: Named accumulations are always more slow than implicit
accumulations in @code{cl-loop}, even when they don't need to be.
@item
@samp{wrap}: Again niche, but missing from @code{cl-loop}.
@end itemize

@item
@code{loopy} is more extensible.  Loop commands can be added easily.

@item
When using @code{loopy-iter}, the macro is more flexible in how it can be used.
@end itemize

@node Translating to and from @samp{cl-loop}
@chapter Translating to and from @samp{cl-loop}

@code{loopy} and @code{cl-loop} use slightly different terminology.  The equivalent of
``for clauses'' are referred to as ``iteration commands'' in @code{loopy}, as they are
generally used for iterating through sequences.  Meanwhile, ``iteration clauses''
can be separated into ``iteration commands'' (@samp{list} and @samp{array}) and ``early-exit
commands'' (@samp{while} and @samp{until}).

``Accumulation clauses'' work the same as ``accumulation commands''.

@menu
* For Clauses::
* Iteration Clauses::
* Accumulation Clauses::
* Other Clauses::
@end menu

@node For Clauses
@section For Clauses

As Emacs has many functions that return lists, there is no need to implement an
exact equivalent for every @samp{for}-clause that @code{cl-loop} has.  Instead, one can
just iterate through the return value of the appropriate function using the
@samp{list} command.

For the commands operating on hash tables, see also the generic iteration
command @samp{map-pairs}, which works generically on hash tables, association lists
(``alists''), property lists (``plists''), and vectors.

@multitable {aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa} {aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa}
@headitem @code{cl-loop}
@tab @code{loopy}
@item @samp{for VAR from EXPR1 to EXPR2 by EXPR3}
@tab @samp{(numbers VAR :from EXPR1 :to EXPR2 :by EXPR3)}
@item @samp{for VAR in LIST [by FUNCTION]}
@tab @samp{(list VAR LIST :by FUNC)}
@item @samp{for VAR on LIST [by FUNCTION]}
@tab @samp{(cons VAR VAL :by FUNC)}
@item @samp{for VAR in-ref LIST by FUNCTION}
@tab @samp{(list-ref VAR LIST :by FUNC)}
@item @samp{for VAR across ARRAY}
@tab @samp{(array VAR ARRAY)}
@item @samp{for VAR across-ref ARRAY}
@tab @samp{(array-ref VAR ARRAY)}
@item @samp{for VAR being the elements of SEQUENCE}
@tab @samp{(sequence VAR SEQUENCE)}
@item @samp{for VAR being the elements of-ref SEQUENCE}
@tab @samp{(sequence-ref VAR SEQUENCE)}
@item @samp{for VAR being the symbols [of OBARRAY]}
@tab None so far.  Use @code{mapatoms}.
@item @samp{for VAR being the hash-keys of HASH-TABLE}
@tab @samp{(list VAR (hash-table-keys HASH-TABLE))}
@item @samp{for VAR being the hash-values of HASH-TABLE}
@tab @samp{(list VAR (hash-table-values HASH-TABLE))}
@item @samp{for VAR being the key-codes of KEYMAP}
@tab None so far.  Use @code{map-keymap}.
@item @samp{for VAR being the key-bindings of KEYMAP}
@tab None so far.  Use @code{map-keymap}.
@item @samp{for VAR being the key-seqs of KEYMAP}
@tab None so far.
@item @samp{for VAR being the overlays [of BUFFER]}
@tab None so far.  Use @code{overlay-lists}.
@item @samp{for VAR being the intervals [of BUFFER]}
@tab None so far.
@item @samp{for VAR being the frames}
@tab @samp{(list VAR (frame-list))}
@item @samp{for VAR being the windows [of FRAME]}
@tab @samp{(list VAR (window-list FRAME))}
@item @samp{for VAR being the buffers}
@tab @samp{(list VAR (buffer-list))}
@item @samp{for VAR = EXPR1 then EXPR2}
@tab @samp{(set VAR EXPR1 EXPR2)}
@end multitable

@node Iteration Clauses
@section Iteration Clauses

@multitable {aaaaaaaaaaaaaaaaaa} {aaaaaaaaaaaaaaaa}
@headitem @code{cl-loop}
@tab @code{loopy}
@item @samp{repeat INT}
@tab @samp{(cycle INT)}
@item @samp{while COND}
@tab @samp{(while COND)}
@item @samp{until COND}
@tab @samp{(until COND)}
@item @samp{iter-by iterator}
@tab None so far.
@item @samp{never}
@tab @samp{(never COND)}
@item @samp{always}
@tab @samp{(always COND)}
@item @samp{thereis}
@tab @samp{(thereis COND)}
@end multitable

@node Accumulation Clauses
@section Accumulation Clauses

Like with @code{cl-loop}, in @code{loopy}, accumulation commands accumulate into the same
variable when no @samp{VAR} is given (by default, @code{loopy-result}).

@multitable {aaaaaaaaaaaaaaaaaaaaaaaa} {aaaaaaaaaaaaaaaaaaaaa}
@headitem @code{cl-loop}
@tab @code{loopy}
@item @samp{append EXPR into VAR}
@tab @samp{(append VAR EXPR)}
@item @samp{collect EXPR into VAR}
@tab @samp{(collect VAR EXPR)}
@item @samp{concat EXPR into VAR}
@tab @samp{(concat VAR EXPR)}
@item @samp{count EXPR into VAR}
@tab @samp{(count VAR EXPR)}
@item @samp{maximize EXPR into VAR}
@tab @samp{(maximize VAR EXPR)}
@item @samp{minimize EXPR into VAR}
@tab @samp{(minimize VAR EXPR)}
@item @samp{nconc EXPR into VAR}
@tab @samp{(nconc VAR EXPR)}
@item @samp{sum EXPR into VAR}
@tab @samp{(sum VAR EXPR)}
@item @samp{vconcat EXPR into VAR}
@tab @samp{(vconcat VAR EXPR)}
@end multitable

@node Other Clauses
@section Other Clauses

In @code{loopy}, @samp{if}, @samp{when}, and @samp{unless} can take multiple loop commands as
arguments, and operate more like their Lisp counterparts.

This means that @samp{if} is not a synonym for @samp{when}.  Just like the normal Lisp
special form @code{if}, @samp{(if COND cmd1 cmd2 cmd3)} only runs @samp{cmd1} if @samp{COND}
evaluates to non-nil, and only runs commands @samp{cmd2} and @samp{cmd3} if @samp{COND}
evaluates to @code{nil}.

@code{loopy} also provides the command @samp{cond}, which works like the normal Lisp
special form @code{cond}.

@multitable {aaaaaaaaaaaaaaaaaaaaaa} {aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa}
@headitem @code{cl-loop}
@tab @code{loopy}
@item @samp{with var = value}
@tab @samp{(with (VAR VALUE))} as a macro argument
@item @samp{if COND clause}
@tab @samp{(if COND CMDS)} as a loop command
@item @samp{when COND clause}
@tab @samp{(when COND CMDS)} as a loop command
@item @samp{unless COND clause}
@tab @samp{(unless COND CMDS)} as a loop command
@item @samp{named NAME}
@tab @samp{NAME} or @samp{(named NAME)} as a macro argument
@item @samp{initially [do] EXPRS}
@tab @samp{(before-do EXPRS)} as a macro argument
@item @samp{finally [do] EXPRS}
@tab @samp{(finally-do EXPRS)} as a macro argument
@item @samp{finally return EXPR}
@tab @samp{(finally-return EXPR)} as a macro argument
@item @samp{do EXPRS}
@tab @samp{(do EXPRS)} as a loop command
@item @samp{return EXPR}
@tab @samp{(return EXPR)} as a loop command
@end multitable

@node Macro Argument and Loop Command Index
@chapter Macro Argument and Loop Command Index

@printindex fn

@node Variable Index
@chapter Variable Index

@printindex vr

@node Concept Index
@chapter Concept Index

@printindex cp

@bye